#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Generator < Racc::Parser

module_eval(<<'...end bnf.y.rb/module_eval...', 'bnf.y.rb', 1517)

  RESERVED = {
    # keyword
    'namespace' => :NAMESPACE,
    'signature' => :SIGNATURE,
    'celltype' => :CELLTYPE,
    'cell' => :CELL,
    'attr' => :ATTRIBUTE,
    'var' => :VAR,
    'call' => :CALL,
    'entry' => :ENTRY,
    'composite' => :COMPOSITE,
    'require' => :REQUIRE,
    'factory' => :FACTORY,
    'FACTORY' => :CTFACTORY,
    'typedef' => :TYPEDEF,
    'struct' => :STRUCT,
    'region' => :REGION,
    'import' => :IMPORT,
    'import_C' => :IMPORT_C,
    'generate' => :GENERATE,
    '__tool_info__' => :TOOL_INFO,

    # types
    'void'    => :VOID,

    'volatile'=> :VOLATILE,
    'const'   => :CONST,

    'signed'  => :SIGNED,
    'unsigned'=> :UNSIGNED,

    'int8_t'    => :INT8_T,
    'int16_t'   => :INT16_T,
    'int32_t'   => :INT32_T,
    'int64_t'   => :INT64_T,
    'int128_t'  => :INT128_T,
    'uint8_t'   => :UINT8_T,
    'uint16_t'  => :UINT16_T,
    'uint32_t'  => :UINT32_T,
    'uint64_t'  => :UINT64_T,
    'uint128_t' => :UINT128_T,

    'float32_t'   => :FLOAT32_T,
    'double64_t'  => :DOUBLE64_T,
    'bool_t'      => :BOOL_T,
    'char_t'  => :CHAR_T,
    'schar_t'  => :SCHAR_T,
    'uchar_t'  => :UCHAR_T,

    # unrecommened types
    'int'     => :INT,
#   'intptr'  => :INTPTR,
    'short'   => :SHORT,
    'long'    => :LONG,

    # obsolete types
    'char'    => :CHAR,
#    'int8'    => :INT8,
#    'int16'   => :INT16,
#    'int32'   => :INT32,
#    'int64'   => :INT64,
#    'int128'  => :INT128,
#    'float'   => :FLOAT,
#    'double'  => :DOUBLE,
#    'bool'    => :BOOL,

    'enum'    => :ENUM,
    'enum8'   => :ENUM8,
    'enum16'  => :ENUM16,
    'enum32'  => :ENUM32,
    'enum64'  => :ENUM64,

    'true'    => :TRUE,
    'false'   => :FALSE,

    'C_EXP'   => :C_EXP,

    'Descriptor'   => :DESCRIPTOR,
  }

  # 指定子 '[]' 内でのみ使用できるキーワード
  RESERVED2 = {
    # specifier
    'id' => :ID,

    # signature
    'callback' => :CALLBACK,
    'context' => :CONTEXT,
    'deviate' => :DEVIATE,

    # celltype
    'singleton' => :SINGLETON,
    'idx_is_id' => :IDX_IS_ID,
    'active' => :ACTIVE,
    'pseudo_active' => :PSEUDO_ACTIVE,

    # port (entry)
    'inline' => :INLINE,
    'ref_desc' => :REF_DESC,   # call も可

    # port (call)
    'optional' => :OPTIONAL,
    'dynamic' => :DYNAMIC,

    # port (call), attribute
    'omit' => :OMIT,

    # attribute
    'choice' => :CHOICE,

    # cell
    'allocator' => :ALLOCATOR,
    'prototype' => :PROTOTYPE,
    'restrict'  => :RESTRICT,

    # FuncType
    'oneway' => :ONEWAY,

    # parameter (basic)
    'in' => :IN,
    'out' => :OUT,
    'inout' => :INOUT,
    'send' => :SEND,
    'receive' => :RECEIVE,

    # parameter 
    'size_is' => :SIZE_IS,
    'count_is' => :COUNT_IS,
    'string' => :STRING,
    'nullable' => :NULLABLE,

    'through' => :THROUGH,
    'in_through' => :IN_THROUGH,
    'out_through' => :OUT_THROUGH,
    'to_through' => :TO_THROUGH,
    'from_through' => :FROM_THROUGH,

    'node' => :NODE,
    'linkunit' => :LINKUNIT ,
    'domain' => :DOMAIN,
    'class' => :CLASS,
  }

  # 再帰的なパーサのためのスタック
  @@generator_nest = -1
  @@generator_stack = []
  @@current_locale = []

  # import_C 中である
  @@import_C = false

  # すべての構文解析が完了した
  @@b_end_all_parse = false

  # tag なし struct
  @@no_struct_tag_num = 0

  def self.parse( file_name, plugin = nil, b_reuse = false )
    # パーサインスタンスを生成(別パーサで読み込む)
    parser = Generator.new

    # plugin から import されている場合の plugin 設定
    parser.set_plugin plugin

    # reuse フラグを設定
    parser.set_reuse b_reuse

    # cdl をパース
    parser.parse( [file_name] )

    # 終期化　パーサスタックを戻す
    parser.finalize
  end

  def finalize

    # mikan Namespace.pop
    Namespace.pop
    Signature.pop
    Celltype.pop
    Cell.pop
    CompositeCelltype.pop
  end

  def set_plugin( plugin )
    @plugin = plugin
  end

  def self.get_plugin
    if @@generator_stack[@@generator_nest] then
      # tecsgen 引数の cdl が import される場合は nil
      return @@generator_stack[@@generator_nest].get_plugin
    else
      return nil
    end
  end

  def get_plugin
    @plugin
  end

  def set_reuse( b_reuse )
    @b_reuse = b_reuse
  end

  def self.is_reuse?
    if @@generator_stack[@@generator_nest] then
      # tecsgen 引数の cdl が import される場合は nil
      return @@generator_stack[@@generator_nest].is_reuse?
    else
      return false
    end
  end

  def is_reuse?
    @b_reuse
  end

  def parse(files)

    # mikan Namespace.push
    Namespace.push
    Signature.push
    Celltype.push
    Cell.push
    CompositeCelltype.push

    @@generator_nest += 1
    @@generator_stack[@@generator_nest] = self
    @in_specifier = false

    begin

      @q = []
      b_in_comment = false
      b_in_comment2 = false
      b_in_string = false

      # euc のコメントを utf8 として扱うと、コメントの終わりを誤る問題の対策
      TECS_LANG::set_kcode_binary

      files.each {|file|
    lineno = 1
    begin
      string = ""
#2.0      IO.foreach(file) {|line|
      TECSIO.foreach(file) {|line|
        col = 1
#        line.rstrip!     改行含む文字列を扱うようになったので、ここで空白を取り除けなくなった

        until line.empty?

          if b_in_comment || b_in_comment2 then
        case line
          # コメント終了
        when /\A\*\//
          if b_in_comment then
            b_in_comment = false
          end
        when /\A\-\-\-\+/
          if b_in_comment2 then
            b_in_comment2 = false
          end
        when /\A./
          ;
        when /\s+/     # line.rstrip! を止めたため \n などの空白文字とまっちするルールが必要になった
          ;
        end
          elsif b_in_string
        if line =~ /\A(?:[^"\\]|\\.)*"/
          string = "#{string}#{$&}"
          @q <<  [:STRING_LITERAL, Token.new(string, file, lineno, col)]
          b_in_string = false
        elsif line =~ /\A.*\\\n/     # 改行 \n は '.' にマッチしない
          string += $&
        elsif line =~ /\A.*\n/     # 改行 \n は '.' にマッチしない
          string += line
          # この位置では error メソッドは使えない (token 読出し前)
          puts "#{file}:#{lineno}:#{col}: error: string literal has newline without escape"
          @@n_error += 1
        end
          else
        case line
        # 空白、プリプロセスディレクティブ
        when /\A\s+/
          ;
        # 識別子
        when /\A[a-zA-Z_]\w*/
          word = $&
          @q << [RESERVED[word] || :IDENTIFIER, Token.new(word.intern, file, lineno, col)]
        # 16 進数定数
        when /\A0x[0-9A-Fa-f]+/
          @q << [:HEX_CONSTANT, Token.new($&, file, lineno, col)]
        # 8 進数定数
        when /\A0[0-7]+/
          @q << [:OCTAL_CONSTANT, Token.new($&, file, lineno, col)]
        # 浮動小数定数
        when /\A[0-9]+\.([0-9]*)?([Ee][+-]?[0-9]+)?/
          @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
        # 整数定数
        when /\A\d+/
          @q << [:INTEGER_CONSTANT, Token.new($&.to_i, file, lineno, col)]
        # 文字定数
        when /\A'(?:[^'\\]|\\.)'/
          @q << [:CHARACTER_LITERAL, Token.new($&, file, lineno, col)]
        # 文字列
#        "#include  #include #include \"../systask/logtask.cfg\"       最後の " 忘れ)で無限ループ
#        when /\A"(?:[^"\\]+|\\.)*"/
        when /\A"(?:[^"\\]|\\.)*"/   # これはうまく行くようだ
          @q << [:STRING_LITERAL, Token.new($&, file, lineno, col)]
        # 文字列 (改行あり)
        when /\A"(?:[^"\\]|\\.)*\\\n$/
          string = $&
          b_in_string = true
        # 文字列 (改行あり, escape なし)
        when /\A("(?:[^"\\]|\e\.)*)\n$/
          string = $1 + "\\\n"
          b_in_string = true
          # この位置では error メソッドは使えない (token 読出し前) # mikan cdl_error ではない
          puts "#{file}:#{lineno}:#{col}: error: string literal has newline without escape"
          @@n_error += 1
        # 山括弧で囲まれた文字列
        # when /\A<[0-9A-Za-z_\. \/]+>/   # AB: angle bracke
        when /\A<(?:[^>\\]|\\.)*>/   # これはうまく行くようだ
          @q << [:AB_STRING_LITERAL, Token.new($&, file, lineno, col)]
        # 行コメント
        when /\A\/\/.*$/
          # 読み飛ばすだけ
        # コメント開始
        when /\A\/\*/
          b_in_comment = true
        when /^\+\-\-\-/
          b_in_comment2 = true
        # '>>', '<<' など
        when /\A>>/, /\A<</, /\A==/, /\A!=/, /\A\&\&/, /\A\|\|/
          @q << [$&, Token.new($&, file, lineno, col)]
        when /\A::/, /\A=>/, /\A<=/, /\A>=/
          @q << [$&, Token.new($&, file, lineno, col)]
        # '(', ')' など一文字の記号、または未知の記号
        when /\A./
          @q << [$&, Token.new($&, file, lineno, col)]
        else
          raise
        end
          end

          line = $'
          col += $&.length
        end

        lineno += 1
      }

    rescue => evar
      Generator.error( "G1014 while open or reading \'$1\'" , file )
      if $debug then
        p puts( evar )
        pp $@
      end
    end
      }

      # 終了の印
      @q << nil

      @yydebug = true
      do_parse

    ensure
      @@generator_nest -= 1
      TECS_LANG::reset_kcode
    end

  end

  def next_token
    token = @q.shift

    if token then
      @@current_locale[@@generator_nest] = token[1].locale

      if token[0] == :IDENTIFIER then
    # TYPE_NAME トークンへ置換え
    if Namespace.is_typename?( token[1].val ) then
      token[0] = :TYPE_NAME
    elsif @in_specifier && RESERVED2[ token[1].val.to_s ] then
      # 指定子キーワード（ '[', ']' 内でのみ有効)
      token[0] = RESERVED2[ token[1].val.to_s ]
    end
      end

      if $debug then     # 070107 token 無効時ここを通さないようした (through 対応 -d の時に例外発生) 
    locale = @@current_locale[@@generator_nest]
    if token then
      print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}'\n" )
    else
      print( "#{locale[0]}: line #{locale[1]} : EOF\n" )
    end
      end
    else
      token = [ false, false ]
    end

    token
  end

  def on_error(t, v, vstack)
    # p t, token_to_str(t), vstack
    if token_to_str(t) == "$end" then
      Generator.error( "G1015 Unexpected EOF"  )
    else
      Generator.error( "G1016 syntax error near \'$1\'" , v.val )
    end
  end

  def self.current_locale
    @@current_locale[ @@generator_nest ]
  end

  @@n_error = 0
  @@n_warning = 0
  @@n_info = 0

  # このメソッドは構文解析、意味解析からのみ呼出し可（コード生成でエラー発生は不適切）
  def self.error( msg, *arg )
    locale = nil
    self.error2( locale, msg, *arg )
  end

  def self.error2( locale, msg, *arg )
    @@n_error += 1

    msg = TECSMsg.get_error_message( msg )
    # $1, $2, ... を arg で置換
    count = 1
    arg.each{ |a|
      str = TECSIO.str_code_convert( msg, a.to_s )
      msg.sub!( /\$#{count}/, str )
      count += 1
    }

    # import_C の中でのエラー？
    if @@import_C then
      # C_parser.error( msg )
      locale = C_parser.current_locale
    else

      # Node の記憶する 位置 (locale) を使用した場合、変更以前に比べ、
      # 問題発生箇所と異なる位置にエラーが出るため、構文解析中のエラー
      # は、解析中の位置を出力する．(new_XXX で owner が子要素のチェッ
      # クをすると owner の行番号が出てしまう点で、ずれが生じている)

      if @@b_end_all_parse == false || locale == nil then
    locale = @@current_locale[ @@generator_nest ]
      end
    end
    if locale then
      Console.puts "#{locale[0]}:#{locale[1]}:#{locale[2]}: error: #{msg}"
    else
      Console.puts "error: #{msg}"
    end
  end

  # このメソッドは構文解析、意味解析からのみ呼出し可（コード生成でウォーニング発生は不適切）
  def self.warning( msg, *arg )
    locale = nil
    self.warning2( locale, msg, *arg )
  end

  def self.warning2( locale, msg, *arg )
    @@n_warning += 1

    msg = TECSMsg.get_warning_message( msg )
    # $1, $2, ... を arg で置換
    count = 1
    arg.each{ |a|
      str = TECSIO.str_code_convert( msg, a.to_s )
      msg.sub!( /\$#{count}/, str )
      count += 1
    }

    # import_C の中でのウォーニング？
    if @@import_C then
      # C_parser.warning( msg )
      locale = C_parser.current_locale
    else
      if @@b_end_all_parse == false || locale == nil then
    locale = @@current_locale[ @@generator_nest ]
      end
    end
    if locale then
      Console.puts "#{locale[0]}:#{locale[1]}:#{locale[2]}: warning: #{msg}"
    else
      Console.puts "warning: #{msg}"
    end
  end

  # このメソッドは構文解析、意味解析からのみ呼出し可
  def self.info( msg, *arg )
    locale = nil
    self.info2( locale, msg, *arg )
  end

  def self.info2( locale, msg, *arg )
    @@n_info += 1

    msg = TECSMsg.get_info_message( msg )
    # $1, $2, ... を arg で置換
    count = 1
    arg.each{ |a|
      str = TECSIO.str_code_convert( msg, a.to_s )
      msg.sub!( /\$#{count}/, str )
      count += 1
    }

    # import_C の中でのウォーニング？
    if @@import_C then
      # C_parser.info( msg )
      locale = C_parser.current_locale
    else
      if @@b_end_all_parse == false || locale == nil then
    locale = @@current_locale[ @@generator_nest ]
      end
    end
    if locale then
      Console.puts "#{locale[0]}:#{locale[1]}:#{locale[2]}: info: #{msg}"
    else
      Console.puts "info: #{msg}"
    end
  end

  def self.get_n_error
    @@n_error
  end

  def self.get_n_warning
    @@n_warning
  end

  def self.get_n_info
    @@n_info
  end

  def self.get_nest
    @@generator_nest
  end

  def self.parsing_C?
    @@import_C
  end

  #===  '[' specifier 始め
  def set_in_specifier
    # p "set_in_specifier"
    @in_specifier = true
  end

  #=== ']' specifier 終わり
  def unset_in_specifier
    # p "unset_in_specifier"
    @in_specifier = false
  end

  # statement_specifier は構文解釈途中で参照したいため
  @@statement_specifier_stack = []
  def self.add_statement_specifier( ss )
    if( @@statement_specifier_stack[ @@generator_nest ] == nil )then
      @@statement_specifier_stack[ @@generator_nest ] = [ ss ]
    else
      @@statement_specifier_stack[ @@generator_nest ] << ss
    end
  end


  def self.get_statement_specifier
    spec_list = @@statement_specifier_stack[ @@generator_nest ]
    @@statement_specifier_stack[ @@generator_nest ] = nil
    return spec_list
  end

  #=== すべての構文解析が完了したことを報告
  def self.end_all_parse
    @@b_end_all_parse = true
  end

...end bnf.y.rb/module_eval...
##### State transition tables begin ###

clist = [
'65,251,687,334,180,3,77,568,843,334,77,77,201,202,203,204,205,206,207',
'209,87,210,724,239,688,139,548,214,215,216,217,218,219,220,773,825,99',
'876,732,139,139,139,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25',
'26,27,28,29,30,31,32,33,34,35,38,470,164,77,139,450,42,43,44,45,46,47',
'48,49,48,49,847,139,334,139,139,139,164,98,139,139,192,69,846,65,163',
'181,192,192,192,67,68,77,70,71,77,72,79,73,310,311,330,866,139,192,172',
'137,331,333,88,192,74,74,75,76,76,192,192,704,192,137,137,137,89,78',
'658,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31',
'32,33,34,35,38,137,137,395,396,397,42,43,44,45,46,47,48,49,137,139,137',
'137,137,65,74,137,137,76,310,311,330,69,90,655,77,77,331,333,665,67',
'68,139,70,71,139,72,404,73,403,137,310,311,312,86,313,314,316,317,94',
'85,77,74,75,826,76,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,30,31,32,33,34,35,38,258,647,659,125,411,42,43,44,45,46,47',
'48,49,288,151,278,320,150,65,258,183,137,401,408,417,280,69,827,126',
'77,183,257,410,151,67,68,150,70,71,404,72,709,73,137,289,646,137,319',
'77,648,400,334,127,402,409,416,74,75,77,76,5,6,7,10,13,14,15,16,17,18',
'19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,419,430,507,131',
'164,42,43,44,45,46,47,48,49,672,342,86,343,86,344,133,455,85,677,85',
'690,87,69,87,146,147,436,418,513,506,67,68,135,70,71,701,72,710,73,734',
'671,201,202,203,204,205,206,207,209,676,210,691,74,75,139,76,214,215',
'216,217,218,219,220,310,311,330,700,142,711,144,711,331,333,310,311',
'312,701,313,314,316,317,201,202,203,204,205,206,207,209,481,210,145',
'482,841,139,856,214,215,216,217,218,219,220,86,148,86,156,804,880,85',
'236,85,164,87,164,87,201,202,203,204,205,206,207,209,840,210,857,293',
'294,139,237,214,215,216,217,218,219,220,164,881,523,731,557,747,748',
'750,751,157,481,137,236,482,198,749,747,748,750,751,87,733,164,753,752',
'198,749,795,574,788,351,352,237,732,753,752,102,103,104,105,106,107',
'108,109,110,111,112,113,114,160,163,137,201,202,203,204,205,206,207',
'209,164,210,834,865,889,139,161,214,215,216,217,218,219,220,475,117',
'118,119,120,121,122,123,124,546,165,475,137,544,782,166,835,864,888',
'5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32',
'33,34,35,38,872,395,396,397,871,42,43,44,45,46,47,48,49,201,202,203',
'204,205,206,207,209,887,210,167,590,886,139,589,214,215,216,217,218',
'219,220,355,356,357,358,137,201,202,203,204,205,206,207,346,590,210',
'168,589,169,139,170,214,215,216,217,218,219,220,201,202,203,204,205',
'206,207,209,173,210,353,354,174,139,175,214,215,216,217,218,219,220',
'201,202,203,204,205,206,207,209,176,210,359,360,177,139,178,214,215',
'216,217,218,219,220,179,201,202,203,204,205,206,207,209,183,210,641',
'365,366,139,137,214,215,216,217,218,219,220,405,337,236,520,521,187',
'642,188,201,202,203,204,205,206,207,209,640,210,615,137,459,139,237',
'214,215,216,217,218,219,220,747,748,750,751,807,355,356,357,358,198',
'749,137,461,462,463,460,806,189,753,752,190,201,202,203,204,205,206',
'207,209,139,210,351,352,137,139,192,214,215,216,217,218,219,220,351',
'352,194,201,202,203,204,205,206,207,209,441,210,137,353,354,139,441',
'214,215,216,217,218,219,220,348,475,353,354,195,349,350,440,442,443',
'444,445,196,440,442,443,444,445,137,5,6,7,10,13,14,15,16,17,18,19,20',
'21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,355,356,357,358,198',
'42,43,44,45,46,47,48,49,249,137,201,202,203,204,205,206,207,209,87,210',
'353,354,259,139,160,214,215,216,217,218,219,220,353,354,137,201,202',
'203,204,205,206,207,209,267,210,359,360,210,139,183,214,215,216,217',
'218,219,220,201,202,203,204,205,206,207,209,267,210,602,337,267,139',
'275,214,215,216,217,218,219,220,201,202,203,204,205,206,207,209,282',
'210,631,294,282,139,285,214,215,216,217,218,219,220,757,521,287,201',
'202,203,204,205,206,207,209,290,210,797,798,291,139,137,214,215,216',
'217,218,219,220,799,800,292,201,202,203,204,205,206,207,209,295,210',
'296,139,336,139,137,214,215,216,217,218,219,220,201,202,203,204,205',
'206,207,209,192,210,337,361,362,139,137,214,215,216,217,218,219,220',
'201,202,203,204,205,206,207,209,363,210,364,369,370,139,137,214,215',
'216,217,218,219,220,372,373,160,201,202,203,204,205,206,207,209,406',
'210,407,412,144,139,137,214,215,216,217,218,219,220,414,415,420,201',
'202,203,204,205,206,207,209,421,210,422,423,424,139,137,214,215,216',
'217,218,219,220,201,202,203,204,205,206,207,209,425,210,448,449,453',
'139,137,214,215,216,217,218,219,220,201,202,203,204,205,206,207,209',
'464,210,467,468,475,139,137,214,215,216,217,218,219,220,476,477,484',
'201,202,203,204,205,206,207,209,485,210,210,514,515,139,137,214,215',
'216,217,218,219,220,516,517,518,201,202,203,204,205,206,207,209,524',
'210,525,526,267,139,137,214,215,216,217,218,219,220,201,202,203,204',
'205,206,207,209,529,210,210,267,534,139,137,214,215,216,217,218,219',
'220,201,202,203,204,205,206,207,209,529,210,183,537,210,139,137,214',
'215,216,217,218,219,220,210,183,183,201,202,203,204,205,206,207,209',
'543,210,547,550,551,139,137,214,215,216,217,218,219,220,552,554,555',
'201,202,203,204,205,206,207,209,558,210,192,267,-236,139,137,214,215',
'216,217,218,219,220,201,202,203,204,205,206,207,209,569,210,572,575',
'192,139,137,214,215,216,217,218,219,220,201,202,203,204,205,206,207',
'209,579,210,581,334,584,139,137,214,215,216,217,218,219,220,198,597',
'598,201,202,203,204,205,206,207,209,361,210,362,595,363,139,137,214',
'215,216,217,218,219,220,364,599,615,201,202,203,204,205,206,207,209',
'616,210,337,617,620,139,137,214,215,216,217,218,219,220,201,202,203',
'204,205,206,207,209,621,210,623,624,625,139,137,214,215,216,217,218',
'219,220,201,202,203,204,205,206,207,209,626,210,627,628,629,139,137',
'214,215,216,217,218,219,220,348,210,348,236,600,349,350,349,350,201',
'202,203,204,205,206,207,209,137,210,632,164,267,139,237,214,215,216',
'217,218,219,220,201,202,203,204,205,206,207,209,652,210,267,137,267',
'139,673,214,215,216,217,218,219,220,201,202,203,204,205,206,207,209',
'674,210,678,137,683,139,684,214,215,216,217,218,219,220,201,202,203',
'204,205,206,207,209,685,210,689,137,692,139,694,214,215,216,217,218',
'219,220,695,696,698,699,192,702,201,202,203,204,205,206,207,209,210',
'210,210,679,210,139,137,214,215,216,217,218,219,220,201,202,203,204',
'205,206,207,209,707,210,716,595,164,139,137,214,215,216,217,218,219',
'220,201,202,203,204,205,206,207,209,718,210,719,720,164,139,137,214',
'215,216,217,218,219,220,201,202,203,204,205,206,207,209,722,210,723',
'712,725,139,137,214,215,216,217,218,219,220,726,727,730,735,738,581',
'201,202,203,204,205,206,207,209,74,210,198,754,755,139,137,214,215,216',
'217,218,219,220,201,202,203,204,205,206,207,209,758,210,529,762,763',
'139,137,214,215,216,217,218,219,220,201,202,203,204,205,206,207,209',
'764,210,765,766,529,139,137,214,215,216,217,218,219,220,201,202,203',
'204,205,206,207,209,267,210,383,384,385,139,137,214,215,216,217,218',
'219,220,378,379,380,381,382,386,201,202,203,204,205,206,207,209,771',
'210,772,784,776,139,137,214,215,216,217,218,219,220,201,202,203,204',
'205,206,207,209,267,210,783,791,792,139,137,214,215,216,217,218,219',
'220,201,202,203,204,205,206,207,209,793,210,801,803,192,139,137,214',
'215,216,217,218,219,220,201,202,203,204,205,206,207,209,459,210,805',
'808,809,139,137,214,215,216,217,218,219,220,383,384,385,236,810,813',
'814,815,461,462,463,460,378,379,380,381,382,386,816,665,137,730,183',
'237,821,236,20,21,22,23,24,25,26,27,28,29,30,31,32,33,86,822,137,823',
'824,237,85,236,738,698,87,839,844,201,202,203,204,205,206,207,209,848',
'210,267,137,-391,139,237,214,215,216,217,218,219,220,201,202,203,204',
'205,206,207,209,850,210,851,137,852,139,854,214,215,216,217,218,219',
'220,201,202,203,204,205,206,207,209,813,210,210,784,860,139,863,214',
'215,216,217,218,219,220,201,202,203,204,205,206,207,209,869,210,873',
'874,875,139,878,214,215,216,217,218,219,220,879,846,267,883,334,885',
'201,202,203,204,205,206,207,209,890,210,891,893,894,139,137,214,215',
'216,217,218,219,220,201,202,203,204,205,206,207,209,,210,,,,139,137',
'214,215,216,217,218,219,220,201,202,203,204,205,206,207,209,,210,,,',
'139,137,214,215,216,217,218,219,220,,,,236,,,747,748,750,751,,86,86',
',137,198,749,85,85,,,87,87,237,753,752,102,103,104,105,106,107,108,109',
'110,111,112,113,114,86,86,86,137,,,85,85,85,,87,87,87,86,481,593,,592',
',85,,,,87,87,137,117,118,119,120,121,122,123,124,86,86,475,,,,85,85',
',,87,87,,137,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28',
'29,30,31,32,33,34,35,38,243,,77,,,42,43,44,45,46,47,48,49,102,103,104',
'105,106,107,108,109,110,111,112,113,114,,,,,,,,5,6,7,10,13,14,15,16',
'17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,681,,77',
',,42,43,44,45,46,47,48,49,117,118,119,120,121,122,123,124,117,118,119',
'120,121,122,123,124,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24',
'25,26,27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,310',
'311,312,,313,314,316,317,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20',
'21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,129,,,,,42,43,44,45',
'46,47,48,49,509,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21',
'22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47',
'48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24',
'25,26,27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,',
',,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,30,31,32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,',
',,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28',
'29,30,31,32,33,34,35,38,77,388,,,,42,43,44,45,46,47,48,49,,,,,,,,,,',
',,,,,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'30,31,32,33,34,35,38,77,432,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,',
',,,,,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30',
'31,32,33,34,35,38,77,519,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,',
',,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31',
'32,33,34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6',
'7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33',
'34,35,38,77,,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38',
'77,,,,,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16',
'17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,643,',
',,42,43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,77,649,,,,42',
'43,44,45,46,47,48,49,,,,,,,,,,,,,,,,,,,5,6,7,10,13,14,15,16,17,18,19',
'20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,,669,,,,42,43,44',
'45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27',
'28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38',
',,,,,42,43,44,45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48',
'49,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31',
'32,33,34,35,38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,,,,,,42,43',
'44,45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10',
'13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35',
'38,,,,,,42,43,44,45,46,47,48,49,5,6,7,10,13,14,15,16,17,18,19,20,21',
'22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,,,,,,42,43,44,45,46,47' ]
        racc_action_table = arr = ::Array.new(3392, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'2,155,604,851,126,1,195,451,818,195,335,2,150,150,150,150,150,150,150',
'150,87,150,654,150,605,150,426,150,150,150,150,150,150,150,715,789,41',
'862,818,74,90,292,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,335,100,622,309,314,2,2,2,2,2,2,2,2,87,87,822,331,573,514,515',
'534,115,41,569,642,426,2,822,162,100,126,155,604,451,2,2,190,2,2,162',
'2,3,2,195,195,195,851,701,654,115,150,195,195,8,605,335,2,2,335,2,715',
'789,622,862,74,90,292,9,2,570,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,309,314,256,256,256,162,162,162,162,162,162,162,162,331,702,514',
'515,534,188,622,569,642,622,573,573,573,162,16,570,188,571,573,573,571',
'162,162,733,162,162,847,162,266,162,266,701,190,190,190,83,190,190,190',
'190,38,83,790,162,162,790,162,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,158,563,571,67,273,188,188,188,188,188,188,188,188,179,84,173,193',
'84,297,260,173,702,264,271,281,174,188,790,68,297,174,158,273,149,188',
'188,149,188,188,636,188,636,188,733,179,563,847,193,321,563,260,321',
'69,264,271,281,188,188,300,188,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,283,297,367,71,376,297,297,297,297,297,297,297,297,578,212,4,212',
'86,212,72,321,4,585,86,607,4,297,86,80,80,300,283,376,367,297,297,73',
'297,297,618,297,637,297,668,578,732,732,732,732,732,732,732,732,585',
'732,607,297,297,732,297,732,732,732,732,732,732,732,321,321,321,618',
'75,637,76,668,321,321,300,300,300,761,300,300,300,300,148,148,148,148',
'148,148,148,148,479,148,78,479,811,148,842,148,148,148,148,148,148,148',
'128,82,147,92,761,870,128,732,147,393,128,438,147,168,168,168,168,168',
'168,168,168,811,168,842,184,184,168,732,168,168,168,168,168,168,168',
'457,870,393,664,438,678,678,678,678,93,341,732,148,341,678,678,749,749',
'749,749,341,664,583,678,678,749,749,749,457,732,224,224,148,664,749',
'749,53,53,53,53,53,53,53,53,53,53,53,53,53,98,583,148,209,209,209,209',
'209,209,209,209,728,209,794,849,882,209,99,209,209,209,209,209,209,209',
'678,53,53,53,53,53,53,53,53,421,103,749,168,421,728,105,794,849,882',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,857,523,523,523,857,209',
'209,209,209,209,209,209,209,213,213,213,213,213,213,213,213,881,213',
'107,480,881,213,480,213,213,213,213,213,213,213,226,226,226,226,209',
'214,214,214,214,214,214,214,214,588,214,108,588,112,214,114,214,214',
'214,214,214,214,214,236,236,236,236,236,236,236,236,117,236,225,225',
'118,236,119,236,236,236,236,236,236,236,259,259,259,259,259,259,259',
'259,120,259,227,227,123,259,124,259,259,259,259,259,259,259,125,296',
'296,296,296,296,296,296,296,127,296,559,232,232,296,213,296,296,296',
'296,296,296,296,268,268,236,390,390,129,559,130,342,342,342,342,342',
'342,342,342,559,342,768,214,324,342,236,342,342,342,342,342,342,342',
'793,793,793,793,768,498,498,498,498,793,793,236,324,324,324,324,768',
'132,793,793,134,348,348,348,348,348,348,348,348,137,348,492,492,259',
'348,138,348,348,348,348,348,348,348,493,493,140,346,346,346,346,346',
'346,346,346,303,346,296,494,494,346,557,346,346,346,346,346,346,346',
'223,793,495,495,141,223,223,303,303,303,303,303,143,557,557,557,557',
'557,342,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346',
'346,346,346,346,346,346,346,346,346,346,346,346,346,499,499,499,499',
'145,346,346,346,346,346,346,346,346,152,348,349,349,349,349,349,349',
'349,349,153,349,496,496,160,349,161,349,349,349,349,349,349,349,497',
'497,346,350,350,350,350,350,350,350,350,165,350,500,500,166,350,167',
'350,350,350,350,350,350,350,351,351,351,351,351,351,351,351,169,351',
'508,508,170,351,171,351,351,351,351,351,351,351,352,352,352,352,352',
'352,352,352,175,352,549,549,176,352,177,352,352,352,352,352,352,352',
'693,693,178,353,353,353,353,353,353,353,353,180,353,752,752,181,353',
'349,353,353,353,353,353,353,353,753,753,182,354,354,354,354,354,354',
'354,354,186,354,187,192,197,354,350,354,354,354,354,354,354,354,355',
'355,355,355,355,355,355,355,200,355,208,228,229,355,351,355,355,355',
'355,355,355,355,356,356,356,356,356,356,356,356,230,356,231,237,238',
'356,352,356,356,356,356,356,356,356,242,244,258,357,357,357,357,357',
'357,357,357,269,357,270,274,275,357,353,357,357,357,357,357,357,357',
'277,279,284,358,358,358,358,358,358,358,358,286,358,288,289,290,358',
'354,358,358,358,358,358,358,358,359,359,359,359,359,359,359,359,291',
'359,312,313,315,359,355,359,359,359,359,359,359,359,360,360,360,360',
'360,360,360,360,330,360,332,333,336,360,356,360,360,360,360,360,360',
'360,338,339,343,361,361,361,361,361,361,361,361,344,361,369,381,382',
'361,357,361,361,361,361,361,361,361,383,384,385,362,362,362,362,362',
'362,362,362,395,362,396,397,402,362,358,362,362,362,362,362,362,362',
'363,363,363,363,363,363,363,363,403,363,406,409,410,363,359,363,363',
'363,363,363,363,363,364,364,364,364,364,364,364,364,411,364,412,413',
'414,364,360,364,364,364,364,364,364,364,415,416,418,365,365,365,365',
'365,365,365,365,420,365,423,429,430,365,361,365,365,365,365,365,365',
'365,432,435,436,366,366,366,366,366,366,366,366,441,366,446,447,450',
'366,362,366,366,366,366,366,366,366,404,404,404,404,404,404,404,404',
'452,404,455,459,465,404,363,404,404,404,404,404,404,404,477,477,477',
'477,477,477,477,477,466,477,467,468,470,477,364,477,477,477,477,477',
'477,477,475,483,486,482,482,482,482,482,482,482,482,501,482,502,482',
'503,482,365,482,482,482,482,482,482,482,504,505,528,507,507,507,507',
'507,507,507,507,530,507,531,532,535,507,366,507,507,507,507,507,507',
'507,516,516,516,516,516,516,516,516,536,516,538,539,540,516,404,516',
'516,516,516,516,516,516,517,517,517,517,517,517,517,517,541,517,542',
'545,547,517,477,517,517,517,517,517,517,517,490,548,491,507,507,490',
'490,491,491,518,518,518,518,518,518,518,518,482,518,553,554,558,518',
'507,518,518,518,518,518,518,518,524,524,524,524,524,524,524,524,567',
'524,568,507,575,524,580,524,524,524,524,524,524,524,525,525,525,525',
'525,525,525,525,582,525,586,516,591,525,594,525,525,525,525,525,525',
'525,526,526,526,526,526,526,526,526,596,526,606,517,608,526,612,526',
'526,526,526,526,526,526,613,614,615,616,619,620,589,589,589,589,589',
'589,589,589,621,589,625,589,626,589,518,589,589,589,589,589,589,589',
'592,592,592,592,592,592,592,592,630,592,643,592,645,592,524,592,592',
'592,592,592,592,592,599,599,599,599,599,599,599,599,647,599,648,649',
'651,599,525,599,599,599,599,599,599,599,641,641,641,641,641,641,641',
'641,652,641,653,641,655,641,526,641,641,641,641,641,641,641,657,659',
'662,669,673,674,691,691,691,691,691,691,691,691,675,691,677,680,682',
'691,589,691,691,691,691,691,691,691,718,718,718,718,718,718,718,718',
'697,718,699,703,704,718,592,718,718,718,718,718,718,718,722,722,722',
'722,722,722,722,722,705,722,706,707,709,722,599,722,722,722,722,722',
'722,722,726,726,726,726,726,726,726,726,711,726,248,248,248,726,641',
'726,726,726,726,726,726,726,248,248,248,248,248,248,731,731,731,731',
'731,731,731,731,712,731,713,731,719,731,691,731,731,731,731,731,731',
'731,758,758,758,758,758,758,758,758,724,758,730,737,739,758,718,758',
'758,758,758,758,758,758,806,806,806,806,806,806,806,806,741,806,756',
'759,760,806,722,806,806,806,806,806,806,806,807,807,807,807,807,807',
'807,807,574,807,767,772,773,807,726,807,807,807,807,807,807,807,513',
'513,513,758,775,776,778,779,574,574,574,574,513,513,513,513,513,513',
'780,781,731,782,783,758,784,806,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,247,785,758,787,788,806,247,807,792,803,247,809,820,816,816,816',
'816,816,816,816,816,824,816,825,806,826,816,807,816,816,816,816,816',
'816,816,821,821,821,821,821,821,821,821,827,821,831,807,832,821,836',
'821,821,821,821,821,821,821,843,843,843,843,843,843,843,843,841,843',
'844,843,845,843,848,843,843,843,843,843,843,843,846,846,846,846,846',
'846,846,846,856,846,858,859,861,846,866,846,846,846,846,846,846,846',
'867,873,876,877,878,880,854,854,854,854,854,854,854,854,883,854,884',
'892,893,854,816,854,854,854,854,854,854,854,865,865,865,865,865,865',
'865,865,,865,,,,865,821,865,865,865,865,865,865,865,889,889,889,889',
'889,889,889,889,,889,,,,889,843,889,889,889,889,889,889,889,,,,854,',
',835,835,835,835,,255,294,,846,835,835,255,294,,,255,294,854,835,835',
'469,469,469,469,469,469,469,469,469,469,469,469,469,374,428,434,854',
',,374,428,434,,374,428,434,521,481,481,,481,,521,,,,521,481,865,469',
'469,469,469,469,469,469,469,610,708,835,,,,610,708,,,610,708,,889,481',
'481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481',
'481,481,481,481,481,481,481,481,481,481,151,,151,,,481,481,481,481,481',
'481,481,481,163,163,163,163,163,163,163,163,163,163,163,163,163,,,,',
',,,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151',
'151,151,151,151,151,151,151,151,151,151,151,590,,590,,,151,151,151,151',
'151,151,151,151,172,172,172,172,172,172,172,172,262,262,262,262,262',
'262,262,262,,,,,590,590,590,590,590,590,590,590,590,590,590,590,590',
'590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,373,,,,',
'590,590,590,590,590,590,590,590,556,556,556,,556,556,556,556,,,,,,,',
',,,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,70,,,,,373,373,373,373,373',
'373,373,373,373,,,,,,,,,,,,,,,,,,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,157,,,,,70,70,70,70',
'70,70,70,70,,,,,,,,,,,,,,,,,,,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,252,,,,,157,157,157,157,157,157,157,157,,,,,,,,,,,,,,,,,,,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,253,,,,,252,252,252,252,252,252',
'252,252,,,,,,,,,,,,,,,,,,,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'299,253,,,,253,253,253,253,253,253,253,253,,,,,,,,,,,,,,,,,,,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,387,299,,,,299,299,299,299,299,299',
'299,299,,,,,,,,,,,,,,,,,,,387,387,387,387,387,387,387,387,387,387,387',
'387,387,387,387,387,387,387,387,387,387,387,387,387,387,387,387,387',
'448,387,,,,387,387,387,387,387,387,387,387,,,,,,,,,,,,,,,,,,,448,448',
'448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448',
'448,448,448,448,448,448,448,448,448,449,,,,,448,448,448,448,448,448',
'448,448,,,,,,,,,,,,,,,,,,,449,449,449,449,449,449,449,449,449,449,449',
'449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449',
'464,,,,,449,449,449,449,449,449,449,449,,,,,,,,,,,,,,,,,,,464,464,464',
'464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464',
'464,464,464,464,464,464,464,464,560,,,,,464,464,464,464,464,464,464',
'464,,,,,,,,,,,,,,,,,,,560,560,560,560,560,560,560,560,560,560,560,560',
'560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,564',
'560,,,,560,560,560,560,560,560,560,560,,,,,,,,,,,,,,,,,,,564,564,564',
'564,564,564,564,564,564,564,564,564,564,564,564,564,564,564,564,564',
'564,564,564,564,564,564,564,564,576,564,,,,564,564,564,564,564,564,564',
'564,,,,,,,,,,,,,,,,,,,576,576,576,576,576,576,576,576,576,576,576,576',
'576,576,576,576,576,576,576,576,576,576,576,576,576,576,576,576,,576',
',,,576,576,576,576,576,576,576,576,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,,,,,,40,40,40,40',
'40,40,40,40,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,246,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
',,,,,295,295,295,295,295,295,295,295,522,522,522,522,522,522,522,522',
'522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522',
'522,522,522,,,,,,522,522,522,522,522,522,522,522,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,,,,,,633,633,633,633,633,633,633,633,717,717',
'717,717,717,717,717,717,717,717,717,717,717,717,717,717,717,717,717',
'717,717,717,717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717',
'717,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721,721',
'721,721,721,721,721,721,721,721,721,721,721,721,,,,,,721,721,721,721',
'721,721,721,721,241,241,241,241,241,241,241,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,,,,,,241',
'241,241,241,241,241' ]
        racc_action_check = arr = ::Array.new(3392, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,     5,    -1,   111,   350,   nil,   nil,   nil,    83,    97,
   nil,   nil,   nil,   nil,   nil,   nil,   186,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1808,   nil,   206,   nil,
  3023,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   430,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,   275,   299,
  2333,   332,   348,   365,    24,   400,   402,   nil,   430,   nil,
   332,   nil,   410,   207,   261,   nil,   352,     1,   nil,   nil,
    25,   nil,   383,   424,   nil,   nil,   nil,   nil,   520,   481,
    58,   nil,   nil,   561,   nil,   566,   nil,   621,   648,   nil,
   nil,   nil,   650,   nil,   652,    78,   nil,   668,   672,   674,
   690,   nil,   nil,   694,   696,   702,    -7,   707,   442,   668,
   672,   nil,   712,   nil,   715,   nil,   nil,   780,   691,   nil,
   796,   767,   nil,   775,   nil,   874,   nil,   444,   427,   280,
    10,  2154,   884,   885,   nil,    -9,   nil,  2392,   215,   nil,
   866,   895,    97,  2085,   nil,   914,   922,   920,   462,   936,
   940,   827,  2107,   261,   271,   958,   962,   964,   974,   259,
   988,   992,   973,   nil,   435,   nil,  1010,  1016,   185,   nil,
    94,   nil,  1011,   232,   nil,    -6,   nil,  1017,   nil,   nil,
   935,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1036,   536,
   nil,   nil,   346,   618,   645,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   815,   496,   653,   614,   669,  1030,  1015,
  1032,  1033,   688,   nil,   nil,   nil,   667,  1061,  1058,   nil,
   nil,  3310,  1071,   nil,  1041,   nil,  3064,  1867,  1657,   nil,
   nil,   nil,  2451,  2510,   nil,  2051,    97,   nil,  1068,   689,
   234,   nil,  2115,   nil,   268,   nil,   197,   nil,   726,  1051,
  1084,   269,   nil,   246,  1054,  1081,   nil,  1065,   nil,  1066,
   nil,   270,   nil,   334,  1067,   nil,  1076,   nil,  1079,  1109,
  1081,  1099,    26,   nil,  2052,  3105,   712,   273,   nil,  2569,
   302,   nil,   nil,   727,   nil,   nil,   nil,   nil,   nil,    58,
   nil,   nil,  1070,  1071,    59,  1072,   nil,   nil,   nil,   nil,
   nil,   292,   nil,   nil,   663,   nil,   nil,   nil,   nil,   nil,
  1090,    71,  1034,  1150,   nil,    -2,  1094,   nil,  1165,  1166,
   nil,   487,   742,  1162,  1171,   nil,   810,   nil,   785,   894,
   919,   941,   963,   988,  1013,  1035,  1057,  1082,  1107,  1129,
  1151,  1176,  1201,  1223,  1245,  1270,  1295,   305,   nil,  1177,
   nil,   nil,   nil,  2274,  2079,   nil,   335,   nil,   nil,   nil,
   nil,  1180,  1181,  1191,  1192,  1193,   nil,  2628,   nil,   nil,
   699,   nil,   nil,   447,   nil,  1202,  1204,  1205,   nil,   nil,
   nil,   nil,  1200,  1218,  1317,   nil,  1224,   nil,   nil,  1221,
  1166,  1240,  1242,  1187,  1248,  1258,  1255,   nil,  1256,   nil,
  1269,   558,   nil,  1272,   nil,   nil,   -15,   nil,  2080,  1273,
  1244,   nil,  1254,   nil,  2081,  1183,  1256,   nil,   449,   nil,
   nil,  1296,   nil,   nil,   nil,   nil,  1197,  1293,  2687,  2746,
  1267,    -7,  1285,   nil,   nil,  1289,   nil,   473,   nil,  1321,
   nil,   nil,   nil,   nil,  2805,  1221,  1334,  1336,  1337,  1983,
  1313,   nil,   nil,   nil,   nil,  1352,   nil,  1339,   nil,   428,
   622,  2093,  1364,  1351,   nil,   nil,  1355,   nil,   nil,   nil,
  1438,  1440,   777,   789,   797,   810,   880,   892,   743,   853,
   899,  1356,  1342,  1343,  1352,  1350,   nil,  1389,   943,   nil,
   nil,   nil,   nil,  1763,    73,    74,  1411,  1433,  1464,   nil,
   nil,  2092,  3146,   535,  1486,  1508,  1530,   nil,  1376,   nil,
  1386,  1390,  1392,   nil,    75,  1361,  1380,   nil,  1413,  1414,
  1384,  1402,  1435,   nil,   nil,  1436,   nil,  1407,  1447,   935,
   nil,   nil,   nil,  1436,  1464,   nil,  2180,   733,  1463,   712,
  2864,   nil,   nil,   183,  2923,   nil,   nil,  1422,  1483,    78,
   124,   186,   nil,    72,  1729,  1485,  2982,   nil,   317,   nil,
  1488,   nil,  1389,   495,   nil,   325,  1481,   nil,   646,  1558,
  2215,  1512,  1580,   nil,  1514,   nil,  1527,   nil,   nil,  1602,
   nil,   nil,   nil,   nil,    -8,    14,  1532,   358,  1534,   nil,
  2113,   nil,  1536,  1544,  1545,  1541,  1543,   nil,   342,  1448,
  1488,  1557,    60,   nil,   nil,  1559,  1561,   nil,   nil,   nil,
  1580,   nil,   nil,  3187,   nil,   nil,   283,   375,   nil,   nil,
   nil,  1624,    79,  1552,   nil,  1581,   nil,  1603,  1572,  1575,
   nil,  1603,  1625,  1596,     8,  1598,   nil,  1639,   nil,  1609,
   nil,   nil,  1546,   nil,   477,   nil,   nil,   nil,   377,  1611,
   nil,   nil,   nil,  1637,  1638,  1535,   nil,  1653,   489,   nil,
  1652,   nil,  1656,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1652,   nil,   947,   nil,   nil,   nil,  1642,   nil,  1671,
   nil,   102,   167,  1677,  1648,  1696,  1698,  1669,  2114,  1695,
   nil,  1713,  1716,  1745,   nil,    20,   nil,  3228,  1674,  1689,
   nil,  3269,  1696,   nil,  1763,   nil,  1718,   nil,   533,   nil,
  1771,  1746,   387,   189,   nil,   nil,   nil,  1741,   nil,  1768,
   nil,  1761,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   500,
   nil,   nil,   996,  1008,   nil,   nil,  1792,   nil,  1768,  1789,
  1694,   383,   nil,   nil,   nil,   nil,   nil,  1784,   740,   nil,
   nil,   nil,  1785,  1811,   nil,  1830,  1830,   nil,  1832,  1803,
  1813,  1840,  1753,  1843,  1818,  1864,   nil,  1839,  1866,    21,
   211,   nil,  1869,   764,   535,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1870,   nil,   nil,  1790,  1812,   nil,  1847,
   nil,   400,   nil,   nil,   nil,   nil,  1887,   nil,    -4,   nil,
  1847,  1909,    55,   nil,  1882,  1884,  1772,  1879,   nil,   nil,
   nil,  1792,  1883,   nil,   nil,  2053,  1883,   nil,   nil,   nil,
   nil,  1930,   433,  1931,  1932,  1905,  1953,   192,  1907,   537,
   nil,   -12,   nil,   nil,  1981,   nil,  1923,   596,  1952,  1956,
   nil,  1927,    23,   nil,   nil,  2003,  1955,  1937,   nil,   nil,
   446,   nil,   nil,  1936,   nil,   nil,  1964,  1967,  1966,   nil,
  1942,   617,   538,  1951,  1953,   nil,   nil,   nil,   nil,  2025,
   nil,   nil,  1981,  1955,   nil ]

racc_action_default = [
  -194,  -442,    -1,  -442,  -442,   -69,   -70,   -71,   -72,   -73,
   -74,   -75,   -76,   -77,   -78,   -79,  -442,   -81,   -82,   -83,
   -84,   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,
   -94,   -95,   -96,   -97,   -98,   -99,  -442,  -101,  -104,  -118,
  -442,  -442,  -126,  -127,  -128,  -129,  -130,  -131,  -136,  -137,
  -192,  -193,  -195,  -442,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -206,  -207,  -208,  -209,  -210,  -240,  -442,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -419,  -442,   895,
  -442,   -65,   -67,  -442,  -139,  -140,  -442,  -146,  -205,  -204,
  -442,  -100,  -106,  -442,  -109,   -72,   -73,  -119,  -442,  -125,
  -442,  -211,  -213,  -442,  -215,  -442,  -217,  -442,  -442,  -220,
  -221,  -222,  -442,  -224,  -442,  -442,  -394,  -442,  -442,  -442,
  -442,  -404,  -405,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -442,  -253,  -442,  -261,  -442,  -267,  -256,  -442,  -333,  -259,
  -442,  -442,  -356,  -442,  -408,  -442,   -62,  -442,  -442,  -138,
  -442,  -442,  -442,  -147,  -148,  -442,  -102,  -442,  -442,  -132,
  -134,  -442,  -442,  -442,  -420,  -442,  -442,  -442,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -442,  -442,  -442,  -343,  -442,  -250,  -442,  -248,  -442,  -262,
  -442,  -257,  -442,  -442,  -334,  -442,  -413,  -442,  -435,   -66,
    -2,    -3,    -4,    -5,    -6,    -7,    -8,    -9,   -10,  -442,
   -12,   -14,   -18,  -442,  -442,   -22,   -23,   -24,   -25,   -26,
   -27,   -28,   -30,   -34,   -37,   -40,   -45,   -48,   -50,   -52,
   -54,   -56,   -58,   -61,   -68,  -186,  -442,  -442,  -442,  -143,
   -63,  -442,  -442,  -145,  -150,  -152,  -442,  -156,  -442,  -141,
  -149,   -80,  -442,  -442,  -107,  -442,  -442,  -123,  -442,  -442,
  -442,  -196,  -442,  -212,  -442,  -226,  -442,  -236,  -442,  -442,
  -442,  -442,  -230,  -442,  -442,  -442,  -395,  -442,  -397,  -442,
  -399,  -442,  -418,  -442,  -442,  -409,  -442,  -411,  -442,  -442,
  -442,  -442,  -442,  -246,  -442,  -442,  -442,  -442,  -254,  -442,
  -442,  -268,  -270,  -442,  -272,  -273,  -274,  -275,  -276,  -442,
  -295,  -296,  -442,  -442,  -442,  -442,  -319,  -320,  -258,  -330,
  -332,  -442,  -357,  -359,  -442,  -361,  -362,  -363,  -364,  -372,
  -442,  -442,  -442,  -442,  -389,  -442,  -442,   -13,  -442,  -442,
   -60,  -172,  -442,  -442,  -442,   -19,  -442,   -20,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -190,  -442,
  -142,   -64,  -144,  -442,  -157,  -155,  -442,  -159,  -161,  -162,
  -163,  -442,  -442,  -166,  -442,  -442,  -171,  -442,  -105,  -108,
  -442,  -120,  -122,  -442,  -112,  -114,  -442,  -442,  -133,  -135,
  -124,  -214,  -442,  -442,  -442,  -216,  -442,  -219,  -223,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -401,  -442,  -403,
  -442,  -442,  -241,  -442,  -243,  -244,  -442,  -251,  -442,  -442,
  -442,  -255,  -442,  -263,  -442,  -442,  -442,  -269,  -442,  -277,
  -279,  -442,  -281,  -282,  -283,  -284,  -297,  -442,  -442,  -442,
  -259,  -442,  -442,  -321,  -335,  -442,  -358,  -442,  -365,  -442,
  -368,  -369,  -370,  -371,  -442,  -379,  -442,  -442,  -442,  -442,
  -442,  -414,  -415,  -416,  -421,  -442,   -11,  -442,  -173,  -174,
  -175,  -442,  -442,  -442,   -16,   -17,  -442,   -31,   -32,   -33,
   -35,   -36,   -38,   -39,   -41,   -42,   -43,   -44,   -46,   -47,
   -49,   -51,   -53,   -55,   -57,  -442,  -187,  -442,  -442,  -151,
  -153,  -154,  -158,  -442,  -442,  -442,  -442,  -442,  -442,  -103,
  -110,  -442,  -442,  -442,  -442,  -442,  -442,  -227,  -442,  -237,
  -442,  -344,  -442,  -231,  -442,  -442,  -442,  -413,  -442,  -442,
  -442,  -442,  -442,  -410,  -239,  -442,  -412,  -442,  -442,  -442,
  -249,  -252,  -260,  -442,  -442,  -266,  -442,  -442,  -442,  -442,
  -442,  -300,  -302,  -442,  -442,  -311,  -313,  -442,  -442,  -442,
  -442,  -442,  -355,  -442,  -442,  -442,  -442,  -374,  -442,  -380,
  -442,  -390,  -442,  -442,  -393,  -442,  -442,   -29,  -176,  -442,
  -442,  -442,  -419,  -182,  -442,  -178,  -442,   -15,   -21,  -442,
  -188,  -191,  -189,  -160,  -442,  -442,  -442,  -442,  -442,  -121,
  -442,  -113,  -442,  -442,  -442,  -442,  -442,  -218,  -442,  -234,
  -442,  -442,  -442,  -396,  -398,  -442,  -442,  -406,  -407,  -242,
  -442,  -247,  -264,  -442,  -271,  -278,  -442,  -442,  -285,  -286,
  -291,  -442,  -442,  -442,  -301,  -442,  -304,  -442,  -442,  -442,
  -312,  -442,  -442,  -442,  -442,  -442,  -322,  -442,  -325,  -442,
  -336,  -337,  -442,  -339,  -442,  -349,  -360,  -366,  -442,  -442,
  -375,  -376,  -378,  -442,  -442,  -442,  -422,  -442,  -442,  -180,
  -442,  -184,  -442,  -177,  -183,  -179,   -59,  -164,  -165,  -167,
  -168,  -442,  -170,  -442,  -115,  -116,  -117,  -442,  -238,  -442,
  -232,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -280,  -442,  -442,  -442,  -298,  -442,  -299,  -442,  -442,  -442,
  -310,  -442,  -442,  -316,  -442,  -318,  -442,  -331,  -442,  -341,
  -442,  -442,  -442,  -442,  -367,  -373,  -381,  -442,  -391,  -442,
  -417,  -442,  -423,  -425,  -426,  -427,  -428,  -429,  -430,  -442,
  -436,  -437,  -442,  -442,  -181,  -185,  -442,  -111,  -442,  -442,
  -235,  -442,  -225,  -392,  -400,  -402,  -245,  -442,  -442,  -287,
  -288,  -292,  -442,  -442,  -303,  -442,  -442,  -314,  -442,  -442,
  -442,  -442,  -442,  -442,  -442,  -442,  -354,  -442,  -442,  -442,
  -442,  -387,  -442,  -442,  -442,  -432,  -433,  -438,  -439,  -440,
  -441,  -169,  -228,  -442,  -233,  -265,  -442,  -442,  -293,  -442,
  -305,  -442,  -308,  -309,  -315,  -317,  -442,  -338,  -442,  -340,
  -442,  -442,  -442,  -347,  -442,  -442,  -349,  -442,  -382,  -383,
  -384,  -442,  -442,  -424,  -431,  -442,  -442,  -289,  -290,  -294,
  -306,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,  -442,
  -377,  -442,  -388,  -434,  -442,  -307,  -442,  -442,  -442,  -442,
  -345,  -442,  -442,  -348,  -350,  -442,  -442,  -442,  -229,  -323,
  -442,  -326,  -328,  -442,  -342,  -346,  -442,  -442,  -442,  -386,
  -442,  -442,  -442,  -442,  -442,  -324,  -327,  -329,  -352,  -442,
  -351,  -385,  -442,  -442,  -353 ]

racc_goto_table = [
    53,   234,    82,   138,   266,   340,   268,   265,   273,   274,
   238,   182,   532,   197,   240,   242,   390,   100,   153,   155,
   538,   539,   329,   335,   154,   162,   582,   184,   270,   473,
   528,   439,   458,    50,     8,   580,     9,   472,   535,   394,
   171,   272,   377,   660,    97,   345,   661,   429,   143,   697,
   618,   269,   478,   742,    81,   389,   729,   277,   279,   561,
   565,   339,   785,   301,   322,   812,   737,   191,   253,   158,
   637,   490,   491,     1,   128,   577,   492,   493,     2,   562,
   566,   347,   241,   500,   152,   498,   499,   668,   501,   368,
   250,   502,   340,   483,   503,   562,   494,   495,   496,   497,
   281,   283,   504,    80,   371,   374,    91,    92,   252,   240,
    93,   393,   609,   398,   149,   510,   376,   505,   588,   399,
   367,    51,   318,   261,   796,   263,   185,   264,   271,   545,
   855,   186,   260,   130,   297,   132,   299,   433,   340,   134,
   300,   634,   340,   438,   769,    82,   447,   713,   329,   560,
   645,   811,   564,   452,   630,   256,   651,   570,   656,   657,
   262,   255,   340,   387,   870,   140,   193,   571,   833,   454,
   728,   644,   817,   437,   858,   650,   819,   241,   818,   141,
   487,   488,   489,   831,   321,   832,    53,   670,   303,   389,
   456,   562,   591,   324,     8,   566,     9,   199,   486,   666,
   457,   576,   466,   578,   790,   736,   829,   562,   276,   508,
   853,   284,   542,   341,   286,   474,   585,   794,   761,   298,
     8,   426,     9,   nil,   nil,   nil,   nil,   703,   nil,   nil,
   nil,   705,   706,   nil,   nil,   nil,   240,   836,   446,   nil,
   nil,   266,   739,   451,   527,   375,   531,   413,   273,   nil,
   256,   256,   nil,   nil,   531,   531,   255,   255,   nil,   nil,
   465,   nil,   828,   nil,   530,   830,   nil,   606,   607,   608,
   nil,   nil,   nil,   nil,   nil,   612,   613,   614,   479,   nil,
   nil,   533,   667,   nil,   nil,   635,   559,   nil,   nil,   nil,
   nil,   nil,   427,   nil,   nil,    53,   536,   435,   303,   428,
   540,   512,   541,   434,   241,   nil,   611,   603,   nil,   587,
   nil,   nil,   340,   340,   340,   nil,   473,   nil,   522,   324,
   340,   340,   340,   nil,   472,   nil,   759,   549,   431,     8,
   nil,     9,   nil,   469,   nil,   nil,   768,   nil,   nil,   nil,
   nil,   nil,   596,   586,   240,   594,   nil,   nil,   774,   nil,
   341,   nil,   777,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   601,   nil,   nil,   556,   622,   nil,   nil,   nil,   nil,   740,
   nil,   693,   511,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   573,   nil,   nil,   256,   nil,   nil,   531,   nil,
   nil,   255,   nil,   nil,   nil,   686,   nil,   nil,   nil,   nil,
   329,   nil,   nil,   nil,   nil,   nil,   nil,   653,   nil,   867,
   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,   479,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   553,   583,   nil,   nil,   884,   nil,   nil,   nil,
   nil,   nil,   nil,   604,   605,   nil,   563,   567,   nil,   680,
   859,   nil,   596,   240,   682,   nil,   nil,   nil,   nil,   nil,
   nil,   531,   563,   619,   nil,   531,   531,   nil,   nil,   775,
   nil,   nil,   nil,   778,   nil,   nil,   nil,   nil,   nil,   633,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   654,   nil,
   nil,   714,   nil,   nil,   nil,   nil,   nil,   nil,   675,   nil,
   nil,   nil,   nil,   nil,   340,   nil,   nil,   nil,   340,   nil,
   nil,   241,   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   741,   nil,   nil,   nil,   nil,
   nil,   756,   nil,   770,   nil,   nil,   nil,   nil,   563,   nil,
   nil,   nil,   567,   779,   nil,   nil,   nil,   nil,   nil,   662,
   717,   715,   845,   nil,   563,   nil,   721,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   787,   780,   nil,   nil,   nil,
   nil,   786,   nil,   nil,   nil,   nil,   nil,   861,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   802,   nil,   nil,   nil,   nil,   877,   340,   nil,   nil,
   469,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   760,   619,   nil,   nil,   nil,   nil,   nil,   708,   nil,   nil,
   892,   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   781,   nil,   nil,   nil,   nil,   nil,   837,
   838,   340,   789,   nil,   849,   nil,   nil,   820,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   842,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   531,   340,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   786,   nil,   nil,   767,   868,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   882,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   862,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   662 ]

racc_goto_check = [
    45,    32,    31,     4,    84,    22,     5,    85,    84,    84,
    23,    81,    82,   167,    28,    55,    44,    67,    29,     4,
    82,    82,   104,   160,    53,    47,   156,    91,    23,    73,
    86,   109,   148,    64,    33,   157,    34,    75,    86,    48,
    47,    88,    60,   132,    25,    10,   133,     6,   159,    87,
    89,    81,    61,   170,    30,    43,   136,    81,    81,   116,
   121,    11,   138,   101,   141,   119,   155,    95,    40,    51,
   110,    12,    12,     1,    25,   116,    13,    13,     2,    24,
    24,     8,    29,    16,    31,    15,    15,   110,    17,    32,
    53,    18,    22,     6,    19,    24,    14,    14,    14,    14,
   162,   162,    20,    26,    28,    27,    37,    39,    41,    28,
    42,    46,    49,    52,    54,    57,    59,     6,    62,    23,
    63,    65,    95,    66,   170,    79,    31,    80,    83,    90,
   119,    92,    51,    93,    94,    96,    97,    98,    22,    99,
   100,   102,    22,   103,   111,    31,   113,   114,   104,   115,
   117,   118,   120,    84,    82,    45,   122,   124,   125,   126,
    45,    25,    22,    40,   127,   128,   129,   130,   170,   131,
   134,   116,   135,   101,   138,   121,   136,    29,   137,   139,
    10,    10,    10,   155,   140,   155,    45,   116,    45,    43,
   141,    24,    61,    45,    33,    24,    34,    30,    11,   142,
   143,   149,   150,   151,   152,   153,   154,    24,   161,     5,
   170,   163,   164,    25,   165,   168,   169,   173,    89,    64,
    33,     4,    34,   nil,   nil,   nil,   nil,    82,   nil,   nil,
   nil,    82,    82,   nil,   nil,   nil,    28,    87,     4,   nil,
   nil,    84,   157,     4,    85,    31,     5,   159,    84,   nil,
    45,    45,   nil,   nil,     5,     5,    25,    25,   nil,   nil,
     4,   nil,   132,   nil,    23,   133,   nil,     6,     6,     6,
   nil,   nil,   nil,   nil,   nil,     6,     6,     6,    53,   nil,
   nil,    88,   148,   nil,   nil,   109,    84,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,    45,    81,    45,    45,    25,
    81,    47,    81,    25,    29,   nil,    48,    60,   nil,    10,
   nil,   nil,    22,    22,    22,   nil,    73,   nil,    47,    45,
    22,    22,    22,   nil,    75,   nil,    86,    91,    64,    33,
   nil,    34,   nil,    45,   nil,   nil,    86,   nil,   nil,   nil,
   nil,   nil,    23,   167,    28,    55,   nil,   nil,    24,   nil,
    25,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,    47,   160,   nil,   nil,   nil,   nil,    73,
   nil,    44,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,   nil,   nil,    45,   nil,   nil,     5,   nil,
   nil,    25,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   104,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,   156,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,    31,    67,   nil,   nil,   156,   nil,   nil,   nil,
   nil,   nil,   nil,     4,     4,   nil,    45,    45,   nil,    23,
    82,   nil,    23,    28,    55,   nil,   nil,   nil,   nil,   nil,
   nil,     5,    45,     4,   nil,     5,     5,   nil,   nil,     6,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,    22,   nil,
   nil,    29,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   167,   nil,   nil,   nil,   nil,
   nil,    23,   nil,    85,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,    45,    84,   nil,   nil,   nil,   nil,   nil,    45,
    47,     4,     6,   nil,    45,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,    23,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,     6,    22,   nil,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,     4,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
     6,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,    32,
    32,    22,     4,   nil,    84,   nil,   nil,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   nil,   nil,    31,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45 ]

racc_goto_pointer = [
   nil,    73,    78,   nil,   -71,  -160,  -249,   nil,  -133,   nil,
  -168,  -148,  -280,  -277,  -259,  -274,  -278,  -274,  -272,  -270,
  -263,   nil,  -204,  -140,  -369,     4,    99,  -141,  -137,   -69,
    50,    -2,  -147,    32,    34,   nil,   nil,    70,   nil,    69,
   -89,   -48,    72,  -198,  -239,    -2,  -145,   -75,  -217,  -409,
   nil,   -29,  -145,   -63,    31,  -136,   nil,  -258,   nil,  -132,
  -206,  -289,  -361,  -116,    31,   119,   -39,   -36,   nil,   nil,
   nil,   nil,   nil,  -306,   nil,  -298,   nil,   nil,   nil,   -38,
   -38,  -116,  -394,   -41,  -161,  -158,  -373,  -566,  -128,  -484,
  -292,  -101,     2,    62,   -54,   -70,    63,   -53,  -162,    66,
   -50,  -127,  -415,  -160,  -173,   nil,   nil,   nil,   nil,  -272,
  -488,  -567,   nil,  -163,  -494,  -299,  -389,  -413,  -625,  -711,
  -297,  -389,  -411,   nil,  -296,  -412,  -411,  -693,    91,    26,
  -287,  -150,  -528,  -525,  -492,  -609,  -606,  -603,  -669,   104,
   -11,  -131,  -374,  -124,   nil,   nil,   nil,   nil,  -292,  -263,
  -129,  -263,  -532,  -466,  -584,  -607,  -442,  -432,   nil,   -28,
  -173,    36,   -75,    34,  -208,    36,   nil,  -132,  -121,  -259,
  -625,   nil,   nil,  -532 ]

racc_goto_default = [
   nil,   nil,   nil,   211,   200,   208,   338,   212,   221,   213,
   222,   nil,   223,   224,   225,   226,   227,   228,   229,   230,
   231,   232,   233,   235,    66,     4,   nil,   247,    39,    40,
   nil,   392,   nil,    95,    96,    11,    12,    37,    36,   nil,
   nil,   nil,   nil,   254,   nil,   248,   nil,   nil,   nil,   391,
    41,   nil,   159,    83,    84,   nil,   244,   245,   246,   nil,
   nil,   nil,   480,   nil,   nil,   nil,    52,   nil,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,   101,
   nil,   nil,   nil,   nil,   636,   639,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   302,   nil,   304,   305,   306,   307,   308,   nil,
   nil,   638,   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   315,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   663,   nil,   664,   nil,   nil,
   nil,   nil,   323,   nil,   325,   326,   327,   328,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   332,   nil,   115,   nil,
   nil,   116,   nil,   nil,   nil,   nil,   471,   743,   745,   nil,
   nil,   744,   746,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  1, 143, :_reduce_2,
  1, 143, :_reduce_3,
  1, 143, :_reduce_4,
  1, 143, :_reduce_5,
  1, 143, :_reduce_6,
  1, 143, :_reduce_7,
  1, 143, :_reduce_8,
  1, 143, :_reduce_9,
  1, 143, :_reduce_10,
  3, 143, :_reduce_11,
  1, 145, :_reduce_none,
  2, 145, :_reduce_13,
  1, 147, :_reduce_none,
  4, 147, :_reduce_15,
  3, 147, :_reduce_16,
  3, 147, :_reduce_17,
  1, 148, :_reduce_none,
  2, 148, :_reduce_19,
  2, 148, :_reduce_20,
  4, 148, :_reduce_21,
  1, 149, :_reduce_22,
  1, 149, :_reduce_23,
  1, 149, :_reduce_24,
  1, 149, :_reduce_25,
  1, 149, :_reduce_26,
  1, 149, :_reduce_27,
  1, 150, :_reduce_none,
  4, 150, :_reduce_29,
  1, 152, :_reduce_none,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  3, 152, :_reduce_33,
  1, 153, :_reduce_none,
  3, 153, :_reduce_35,
  3, 153, :_reduce_36,
  1, 154, :_reduce_none,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 155, :_reduce_none,
  3, 155, :_reduce_41,
  3, 155, :_reduce_42,
  3, 155, :_reduce_43,
  3, 155, :_reduce_44,
  1, 156, :_reduce_none,
  3, 156, :_reduce_46,
  3, 156, :_reduce_47,
  1, 157, :_reduce_none,
  3, 157, :_reduce_49,
  1, 158, :_reduce_none,
  3, 158, :_reduce_51,
  1, 159, :_reduce_none,
  3, 159, :_reduce_53,
  1, 160, :_reduce_none,
  3, 160, :_reduce_55,
  1, 161, :_reduce_none,
  3, 161, :_reduce_57,
  1, 162, :_reduce_none,
  5, 162, :_reduce_59,
  1, 146, :_reduce_60,
  1, 163, :_reduce_61,
  3, 164, :_reduce_62,
  1, 167, :_reduce_none,
  2, 167, :_reduce_64,
  1, 166, :_reduce_65,
  3, 166, :_reduce_66,
  1, 170, :_reduce_none,
  3, 170, :_reduce_68,
  1, 168, :_reduce_69,
  1, 168, :_reduce_70,
  1, 168, :_reduce_71,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_74,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_77,
  1, 168, :_reduce_78,
  1, 168, :_reduce_79,
  4, 168, :_reduce_80,
  1, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 176, :_reduce_83,
  1, 177, :_reduce_84,
  1, 177, :_reduce_85,
  1, 177, :_reduce_86,
  1, 177, :_reduce_87,
  1, 177, :_reduce_88,
  1, 177, :_reduce_89,
  1, 177, :_reduce_90,
  1, 177, :_reduce_91,
  1, 177, :_reduce_92,
  1, 177, :_reduce_93,
  1, 177, :_reduce_94,
  1, 177, :_reduce_95,
  1, 177, :_reduce_96,
  1, 177, :_reduce_97,
  1, 178, :_reduce_98,
  1, 178, :_reduce_99,
  2, 175, :_reduce_100,
  1, 175, :_reduce_none,
  0, 181, :_reduce_102,
  6, 173, :_reduce_103,
  0, 182, :_reduce_104,
  5, 173, :_reduce_105,
  2, 173, :_reduce_106,
  1, 180, :_reduce_none,
  2, 180, :_reduce_none,
  1, 179, :_reduce_109,
  3, 183, :_reduce_110,
  6, 183, :_reduce_111,
  1, 186, :_reduce_112,
  3, 186, :_reduce_113,
  1, 188, :_reduce_114,
  4, 188, :_reduce_115,
  4, 188, :_reduce_116,
  4, 188, :_reduce_117,
  1, 165, :_reduce_none,
  2, 165, :_reduce_119,
  1, 184, :_reduce_120,
  3, 184, :_reduce_121,
  1, 189, :_reduce_none,
  4, 174, :_reduce_none,
  5, 174, :_reduce_none,
  2, 174, :_reduce_none,
  1, 190, :_reduce_126,
  1, 190, :_reduce_127,
  1, 190, :_reduce_128,
  1, 190, :_reduce_129,
  1, 190, :_reduce_130,
  1, 190, :_reduce_131,
  1, 191, :_reduce_none,
  3, 191, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 169, :_reduce_136,
  1, 169, :_reduce_137,
  2, 171, :_reduce_138,
  1, 171, :_reduce_none,
  1, 194, :_reduce_140,
  3, 194, :_reduce_141,
  4, 194, :_reduce_142,
  3, 194, :_reduce_143,
  4, 194, :_reduce_144,
  3, 194, :_reduce_145,
  1, 193, :_reduce_146,
  2, 193, :_reduce_147,
  2, 193, :_reduce_148,
  3, 193, :_reduce_149,
  1, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 196, :_reduce_152,
  3, 196, :_reduce_153,
  3, 197, :_reduce_154,
  2, 197, :_reduce_155,
  1, 197, :_reduce_156,
  2, 197, :_reduce_157,
  3, 198, :_reduce_158,
  1, 199, :_reduce_159,
  3, 199, :_reduce_160,
  1, 200, :_reduce_161,
  1, 200, :_reduce_162,
  1, 200, :_reduce_163,
  4, 200, :_reduce_164,
  4, 200, :_reduce_165,
  1, 200, :_reduce_166,
  4, 200, :_reduce_167,
  4, 200, :_reduce_168,
  6, 200, :_reduce_169,
  4, 200, :_reduce_170,
  1, 200, :_reduce_171,
  1, 151, :_reduce_none,
  2, 151, :_reduce_173,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  2, 201, :_reduce_none,
  3, 202, :_reduce_177,
  2, 202, :_reduce_178,
  3, 202, :_reduce_179,
  3, 202, :_reduce_180,
  4, 202, :_reduce_181,
  2, 202, :_reduce_182,
  3, 202, :_reduce_none,
  3, 202, :_reduce_184,
  4, 202, :_reduce_185,
  1, 172, :_reduce_186,
  3, 172, :_reduce_187,
  4, 172, :_reduce_188,
  4, 172, :_reduce_189,
  1, 203, :_reduce_190,
  3, 203, :_reduce_191,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  0, 142, :_reduce_none,
  1, 204, :_reduce_none,
  4, 204, :_reduce_196,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  2, 206, :_reduce_none,
  2, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_211,
  3, 207, :_reduce_212,
  1, 219, :_reduce_213,
  4, 219, :_reduce_214,
  1, 219, :_reduce_215,
  4, 219, :_reduce_216,
  1, 219, :_reduce_217,
  6, 219, :_reduce_218,
  4, 219, :_reduce_219,
  1, 219, :_reduce_220,
  1, 219, :_reduce_221,
  1, 219, :_reduce_222,
  4, 219, :_reduce_223,
  1, 219, :_reduce_224,
  8, 219, :_reduce_225,
  1, 220, :_reduce_226,
  3, 220, :_reduce_227,
  7, 225, :_reduce_228,
  10, 225, :_reduce_229,
  1, 223, :_reduce_230,
  3, 223, :_reduce_231,
  5, 228, :_reduce_232,
  7, 228, :_reduce_233,
  1, 229, :_reduce_234,
  3, 229, :_reduce_235,
  1, 224, :_reduce_none,
  1, 226, :_reduce_none,
  1, 227, :_reduce_none,
  1, 230, :_reduce_none,
  1, 209, :_reduce_240,
  5, 217, :_reduce_241,
  7, 217, :_reduce_242,
  5, 216, :_reduce_243,
  5, 216, :_reduce_244,
  9, 218, :_reduce_245,
  4, 208, :_reduce_246,
  7, 208, :_reduce_247,
  1, 232, :_reduce_none,
  4, 232, :_reduce_none,
  1, 231, :_reduce_250,
  3, 231, :_reduce_251,
  6, 210, :_reduce_252,
  1, 233, :_reduce_253,
  1, 234, :_reduce_none,
  2, 234, :_reduce_none,
  1, 144, :_reduce_256,
  2, 144, :_reduce_257,
  3, 144, :_reduce_258,
  1, 235, :_reduce_none,
  6, 211, :_reduce_260,
  1, 236, :_reduce_261,
  0, 237, :_reduce_262,
  2, 237, :_reduce_263,
  3, 238, :_reduce_264,
  6, 238, :_reduce_265,
  6, 212, :_reduce_266,
  1, 239, :_reduce_267,
  1, 240, :_reduce_none,
  2, 240, :_reduce_none,
  1, 241, :_reduce_270,
  4, 241, :_reduce_271,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 243, :_reduce_277,
  3, 243, :_reduce_278,
  1, 249, :_reduce_279,
  4, 249, :_reduce_280,
  1, 249, :_reduce_281,
  1, 249, :_reduce_282,
  1, 249, :_reduce_283,
  1, 249, :_reduce_284,
  1, 250, :_reduce_285,
  1, 250, :_reduce_286,
  3, 250, :_reduce_287,
  3, 250, :_reduce_288,
  5, 251, :_reduce_289,
  5, 251, :_reduce_290,
  4, 244, :_reduce_291,
  6, 244, :_reduce_292,
  7, 244, :_reduce_293,
  8, 244, :_reduce_294,
  1, 252, :_reduce_295,
  1, 252, :_reduce_296,
  1, 253, :_reduce_297,
  1, 254, :_reduce_none,
  5, 245, :_reduce_299,
  1, 255, :_reduce_300,
  2, 255, :_reduce_301,
  1, 256, :_reduce_302,
  4, 256, :_reduce_303,
  1, 257, :_reduce_304,
  4, 257, :_reduce_305,
  5, 257, :_reduce_306,
  3, 258, :_reduce_307,
  1, 258, :_reduce_308,
  1, 259, :_reduce_none,
  5, 246, :_reduce_310,
  1, 260, :_reduce_311,
  2, 260, :_reduce_312,
  1, 261, :_reduce_313,
  4, 261, :_reduce_314,
  4, 262, :_reduce_315,
  5, 247, :_reduce_316,
  7, 247, :_reduce_317,
  5, 248, :_reduce_none,
  1, 263, :_reduce_319,
  1, 263, :_reduce_320,
  0, 264, :_reduce_none,
  2, 264, :_reduce_none,
  7, 265, :_reduce_323,
  9, 265, :_reduce_324,
  1, 266, :_reduce_none,
  1, 267, :_reduce_326,
  3, 267, :_reduce_327,
  1, 267, :_reduce_328,
  3, 267, :_reduce_329,
  0, 271, :_reduce_330,
  8, 213, :_reduce_331,
  4, 213, :_reduce_332,
  1, 268, :_reduce_333,
  1, 269, :_reduce_334,
  0, 270, :_reduce_none,
  2, 270, :_reduce_none,
  2, 270, :_reduce_none,
  4, 272, :_reduce_338,
  1, 272, :_reduce_339,
  3, 274, :_reduce_340,
  1, 274, :_reduce_341,
  6, 276, :_reduce_342,
  1, 221, :_reduce_none,
  1, 222, :_reduce_none,
  6, 275, :_reduce_345,
  7, 275, :_reduce_346,
  4, 275, :_reduce_347,
  6, 275, :_reduce_348,
  1, 277, :_reduce_none,
  6, 273, :_reduce_350,
  9, 273, :_reduce_351,
  9, 273, :_reduce_352,
  12, 273, :_reduce_353,
  1, 278, :_reduce_none,
  6, 214, :_reduce_355,
  1, 279, :_reduce_356,
  1, 280, :_reduce_none,
  2, 280, :_reduce_none,
  1, 281, :_reduce_359,
  4, 281, :_reduce_360,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 283, :_reduce_365,
  3, 283, :_reduce_366,
  4, 288, :_reduce_367,
  1, 288, :_reduce_368,
  1, 288, :_reduce_369,
  1, 288, :_reduce_370,
  1, 288, :_reduce_371,
  1, 284, :_reduce_372,
  5, 285, :_reduce_373,
  1, 289, :_reduce_374,
  2, 289, :_reduce_375,
  0, 293, :_reduce_376,
  8, 286, :_reduce_377,
  4, 286, :_reduce_378,
  1, 290, :_reduce_379,
  1, 291, :_reduce_380,
  0, 292, :_reduce_none,
  2, 292, :_reduce_none,
  2, 292, :_reduce_none,
  2, 292, :_reduce_none,
  6, 294, :_reduce_385,
  4, 294, :_reduce_386,
  6, 287, :_reduce_387,
  8, 287, :_reduce_388,
  1, 296, :_reduce_none,
  1, 297, :_reduce_none,
  1, 295, :_reduce_none,
  9, 215, :_reduce_392,
  6, 215, :_reduce_393,
  1, 298, :_reduce_none,
  3, 298, :_reduce_none,
  6, 301, :_reduce_396,
  3, 301, :_reduce_397,
  6, 301, :_reduce_398,
  3, 301, :_reduce_399,
  8, 301, :_reduce_400,
  4, 301, :_reduce_401,
  8, 301, :_reduce_402,
  4, 301, :_reduce_403,
  1, 301, :_reduce_404,
  1, 301, :_reduce_405,
  6, 301, :_reduce_406,
  6, 301, :_reduce_407,
  1, 299, :_reduce_408,
  1, 303, :_reduce_none,
  1, 304, :_reduce_none,
  1, 305, :_reduce_none,
  1, 230, :_reduce_none,
  0, 300, :_reduce_none,
  2, 300, :_reduce_none,
  2, 300, :_reduce_none,
  1, 306, :_reduce_none,
  4, 306, :_reduce_417,
  1, 302, :_reduce_418,
  1, 185, :_reduce_419,
  1, 187, :_reduce_420,
  5, 205, :_reduce_421,
  3, 308, :_reduce_422,
  3, 309, :_reduce_423,
  5, 309, :_reduce_424,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_429,
  1, 310, :_reduce_430,
  3, 312, :_reduce_431,
  2, 312, :_reduce_432,
  1, 313, :_reduce_433,
  3, 313, :_reduce_434,
  1, 307, :_reduce_435,
  1, 311, :_reduce_436,
  1, 311, :_reduce_437,
  2, 311, :_reduce_438,
  2, 311, :_reduce_439,
  2, 311, :_reduce_440,
  2, 311, :_reduce_441 ]

racc_reduce_n = 442

racc_shift_n = 895

racc_token_table = {
  false => 0,
  :error => 1,
  :TRUE => 2,
  :FALSE => 3,
  :INTEGER_CONSTANT => 4,
  :FLOATING_CONSTANT => 5,
  :OCTAL_CONSTANT => 6,
  :HEX_CONSTANT => 7,
  :CHARACTER_LITERAL => 8,
  "(" => 9,
  ")" => 10,
  :STRING_LITERAL => 11,
  "[" => 12,
  "]" => 13,
  "." => 14,
  :IDENTIFIER => 15,
  "->" => 16,
  :SIZEOF => 17,
  "&" => 18,
  "*" => 19,
  "+" => 20,
  "-" => 21,
  "~" => 22,
  "!" => 23,
  "/" => 24,
  "%" => 25,
  "<<" => 26,
  ">>" => 27,
  "<" => 28,
  ">" => 29,
  "<=" => 30,
  ">=" => 31,
  "==" => 32,
  "!=" => 33,
  "^" => 34,
  "|" => 35,
  "&&" => 36,
  "||" => 37,
  "?" => 38,
  ":" => 39,
  ";" => 40,
  "," => 41,
  "=" => 42,
  :VOID => 43,
  :FLOAT32_T => 44,
  :DOUBLE64_T => 45,
  :TYPE_NAME => 46,
  :BOOL_T => 47,
  :FLOAT => 48,
  :DOUBLE => 49,
  :DESCRIPTOR => 50,
  :CHAR_T => 51,
  :SCHAR_T => 52,
  :UCHAR_T => 53,
  :CHAR => 54,
  :SHORT => 55,
  :INT => 56,
  :LONG => 57,
  :INT8_T => 58,
  :INT16_T => 59,
  :INT32_T => 60,
  :INT64_T => 61,
  :INT128_T => 62,
  :UINT8_T => 63,
  :UINT16_T => 64,
  :UINT32_T => 65,
  :UINT64_T => 66,
  :UINT128_T => 67,
  :SIGNED => 68,
  :UNSIGNED => 69,
  :STRUCT => 70,
  "{" => 71,
  "}" => 72,
  :STRING => 73,
  :SIZE_IS => 74,
  :COUNT_IS => 75,
  :ENUM => 76,
  :ENUM8 => 77,
  :ENUM16 => 78,
  :ENUM32 => 79,
  :ENUM64 => 80,
  :ENUM128 => 81,
  :CONST => 82,
  :VOLATILE => 83,
  "..." => 84,
  :IN => 85,
  :OUT => 86,
  :INOUT => 87,
  :SEND => 88,
  :RECEIVE => 89,
  :NULLABLE => 90,
  :C_EXP => 91,
  :ACTIVE => 92,
  :ALLOCATOR => 93,
  :CALLBACK => 94,
  :CONTEXT => 95,
  :DEVIATE => 96,
  :GENERATE => 97,
  :ID => 98,
  :IDX_IS_ID => 99,
  :PROTOTYPE => 100,
  :PSEUDO_ACTIVE => 101,
  :RESTRICT => 102,
  :SINGLETON => 103,
  :THROUGH => 104,
  :IMPORT_C => 105,
  :IMPORT => 106,
  :AB_STRING_LITERAL => 107,
  :TYPEDEF => 108,
  :NAMESPACE => 109,
  "::" => 110,
  :SIGNATURE => 111,
  :ONEWAY => 112,
  :CELLTYPE => 113,
  :INLINE => 114,
  :OPTIONAL => 115,
  :REF_DESC => 116,
  :DYNAMIC => 117,
  :OMIT => 118,
  :CALL => 119,
  :ENTRY => 120,
  :ATTRIBUTE => 121,
  :CHOICE => 122,
  :VAR => 123,
  :REQUIRE => 124,
  :FACTORY => 125,
  :CTFACTORY => 126,
  :CELL => 127,
  :COMPOSITE => 128,
  "=>" => 129,
  :REGION => 130,
  :IN_THROUGH => 131,
  :OUT_THROUGH => 132,
  :TO_THROUGH => 133,
  :FROM_THROUGH => 134,
  :NODE => 135,
  :LINKUNIT => 136,
  :DOMAIN => 137,
  :CLASS => 138,
  :TOOL_INFO => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TRUE",
  "FALSE",
  "INTEGER_CONSTANT",
  "FLOATING_CONSTANT",
  "OCTAL_CONSTANT",
  "HEX_CONSTANT",
  "CHARACTER_LITERAL",
  "\"(\"",
  "\")\"",
  "STRING_LITERAL",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "IDENTIFIER",
  "\"->\"",
  "SIZEOF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"/\"",
  "\"%\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\":\"",
  "\";\"",
  "\",\"",
  "\"=\"",
  "VOID",
  "FLOAT32_T",
  "DOUBLE64_T",
  "TYPE_NAME",
  "BOOL_T",
  "FLOAT",
  "DOUBLE",
  "DESCRIPTOR",
  "CHAR_T",
  "SCHAR_T",
  "UCHAR_T",
  "CHAR",
  "SHORT",
  "INT",
  "LONG",
  "INT8_T",
  "INT16_T",
  "INT32_T",
  "INT64_T",
  "INT128_T",
  "UINT8_T",
  "UINT16_T",
  "UINT32_T",
  "UINT64_T",
  "UINT128_T",
  "SIGNED",
  "UNSIGNED",
  "STRUCT",
  "\"{\"",
  "\"}\"",
  "STRING",
  "SIZE_IS",
  "COUNT_IS",
  "ENUM",
  "ENUM8",
  "ENUM16",
  "ENUM32",
  "ENUM64",
  "ENUM128",
  "CONST",
  "VOLATILE",
  "\"...\"",
  "IN",
  "OUT",
  "INOUT",
  "SEND",
  "RECEIVE",
  "NULLABLE",
  "C_EXP",
  "ACTIVE",
  "ALLOCATOR",
  "CALLBACK",
  "CONTEXT",
  "DEVIATE",
  "GENERATE",
  "ID",
  "IDX_IS_ID",
  "PROTOTYPE",
  "PSEUDO_ACTIVE",
  "RESTRICT",
  "SINGLETON",
  "THROUGH",
  "IMPORT_C",
  "IMPORT",
  "AB_STRING_LITERAL",
  "TYPEDEF",
  "NAMESPACE",
  "\"::\"",
  "SIGNATURE",
  "ONEWAY",
  "CELLTYPE",
  "INLINE",
  "OPTIONAL",
  "REF_DESC",
  "DYNAMIC",
  "OMIT",
  "CALL",
  "ENTRY",
  "ATTRIBUTE",
  "CHOICE",
  "VAR",
  "REQUIRE",
  "FACTORY",
  "CTFACTORY",
  "CELL",
  "COMPOSITE",
  "\"=>\"",
  "REGION",
  "IN_THROUGH",
  "OUT_THROUGH",
  "TO_THROUGH",
  "FROM_THROUGH",
  "NODE",
  "LINKUNIT",
  "DOMAIN",
  "CLASS",
  "TOOL_INFO",
  "$start",
  "all",
  "component_description",
  "primary_expression",
  "namespace_identifier",
  "string_literal_list",
  "expression",
  "postfix_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "type_name",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "conditional_expression",
  "constant_expression",
  "declaration",
  "type_specifier_qualifier_list",
  "init_declarator_list",
  "declaration_specifiers",
  "type_specifier",
  "type_qualifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_specifier",
  "enum_specifier",
  "sign_int_type",
  "char_type",
  "int_type",
  "sign",
  "struct_tag",
  "struct_declaration_list",
  "@1",
  "@2",
  "struct_declaration",
  "struct_declarator_list",
  "spec_L",
  "pointer_specifier_list",
  "spec_R",
  "pointer_specifier",
  "struct_declarator",
  "enum_type",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "parameter_type_list",
  "parameter_list",
  "parameter_declaration",
  "parameter_specifier_list_bracket",
  "parameter_specifier_list",
  "parameter_specifier",
  "abstract_declarator",
  "direct_abstract_declarator",
  "initializer_list",
  "specified_statement",
  "tool_info",
  "statement",
  "statement_specifier_list",
  "typedef",
  "const_statement",
  "namespace",
  "signature",
  "celltype",
  "cell",
  "composite_celltype",
  "region",
  "import",
  "import_C",
  "generate_statement",
  "statement_specifier",
  "alloc_list",
  "plugin_name",
  "plugin_arg",
  "restrict_list",
  "port_name",
  "alloc",
  "func_name",
  "param_name",
  "restrict",
  "region_name_list",
  "class_name",
  "declarator_list",
  "typedef_specifier",
  "namespace_NAME",
  "statement_list",
  "namespace_name",
  "signature_NAME",
  "function_head_list",
  "function_head",
  "celltype_NAME",
  "celltype_statement_list",
  "specified_celltype_statement",
  "celltype_statement",
  "celltype_statement_specifier_list",
  "port",
  "attribute",
  "var",
  "require",
  "factory",
  "celltype_statement_specifier",
  "alloc_list2",
  "alloc2",
  "port_type",
  "namespace_signature_name",
  "array_size",
  "attribute_declaration_list",
  "attribute_declaration",
  "attribute_specifier",
  "choice_list",
  "choice_element",
  "var_declaration_list",
  "var_declaration",
  "var_specifier",
  "factory_head",
  "factory_function_list",
  "factory_function",
  "factory_function_name",
  "arg_list",
  "namespace_celltype_NAME",
  "cell_NAME",
  "join_list",
  "@3",
  "specified_join",
  "reverse_join",
  "join_specifier_list",
  "join",
  "join_specifier",
  "cae_name",
  "array_index",
  "composite_celltype_NAME",
  "composite_celltype_statement_list",
  "specified_composite_celltype_statement",
  "composite_celltype_statement",
  "composite_celltype_statement_specifier_list",
  "composite_port",
  "composite_attribute",
  "internal_cell",
  "export_join",
  "composite_celltype_statement_specifier",
  "composite_attribute_declaration_list",
  "internal_namespace_celltype_NAME",
  "internal_cell_NAME",
  "internal_join_list",
  "@4",
  "external_join",
  "internal_cell_elem_name",
  "export_name",
  "internal_ref_cell_name",
  "region_specifier_list",
  "region_NAME",
  "region_statement",
  "region_specifier",
  "namespace_region_NAME",
  "domain_type",
  "domain_name",
  "class_type",
  "region_cell",
  "JSON_string",
  "JSON_object",
  "JSON_property_list",
  "JSON_value",
  "JSON_number",
  "JSON_array",
  "JSON_array_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 52)
  def _reduce_2(val, _values, result)
     result = [ :IDENTIFIER, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 54)
  def _reduce_3(val, _values, result)
     result = [ :BOOL_CONSTANT, true ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 56)
  def _reduce_4(val, _values, result)
     result = [ :BOOL_CONSTANT, false ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 58)
  def _reduce_5(val, _values, result)
     result = [ :INTEGER_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 60)
  def _reduce_6(val, _values, result)
     result = [ :FLOATING_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 62)
  def _reduce_7(val, _values, result)
     result = [ :OCTAL_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 64)
  def _reduce_8(val, _values, result)
     result = [ :HEX_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 66)
  def _reduce_9(val, _values, result)
     result = [ :CHARACTER_LITERAL, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 68)
  def _reduce_10(val, _values, result)
     result = [ :STRING_LITERAL_LIST, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 70)
  def _reduce_11(val, _values, result)
     result = [ :PARENTHESES, val[1].get_elements ] 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 76)
  def _reduce_13(val, _values, result)
                # 連接した文字列を1つの文字列にまとめる
            str = "\"" + val[0].val.gsub( /\"(.*)\"/, "\\1" ) + val[1].val.gsub( /\"(.*)\"/, "\\1" ) + "\""
            result = Token.new( str, val[0].file, val[0].lineno, val[0].col )
        
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 85)
  def _reduce_15(val, _values, result)
     result = [ :OP_SUBSC, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 87)
  def _reduce_16(val, _values, result)
     result = [ :OP_DOT, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 89)
  def _reduce_17(val, _values, result)
     result = [ :OP_REF, val[0], val[2] ] 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 95)
  def _reduce_19(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 97)
  def _reduce_20(val, _values, result)
     result = [ :OP_SIZEOF_EXPR, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 99)
  def _reduce_21(val, _values, result)
     result = [ :OP_SIZEOF_TYPE, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 102)
  def _reduce_22(val, _values, result)
     result = :OP_U_AMP 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 103)
  def _reduce_23(val, _values, result)
     result = :OP_U_ASTER 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 104)
  def _reduce_24(val, _values, result)
     result = :OP_U_PLUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 105)
  def _reduce_25(val, _values, result)
     result = :OP_U_MINUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 106)
  def _reduce_26(val, _values, result)
     result = :OP_U_TILDE 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 107)
  def _reduce_27(val, _values, result)
     result = :OP_U_EXCLAM 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 112)
  def _reduce_29(val, _values, result)
      result = [ :CAST, val[1], val[3] ] 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 117)
  def _reduce_31(val, _values, result)
     result = [ :OP_MULT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 119)
  def _reduce_32(val, _values, result)
     result = [ :OP_DIV, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 121)
  def _reduce_33(val, _values, result)
     result = [ :OP_REMAIN, val[0], val[2] ]  
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 126)
  def _reduce_35(val, _values, result)
     result = [ :OP_ADD, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 128)
  def _reduce_36(val, _values, result)
     result = [ :OP_SUB, val[0], val[2] ]  
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 133)
  def _reduce_38(val, _values, result)
     result = [ :OP_LSFT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 135)
  def _reduce_39(val, _values, result)
     result = [ :OP_RSFT, val[0], val[2] ]  
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 140)
  def _reduce_41(val, _values, result)
     result = [ :OP_LT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 142)
  def _reduce_42(val, _values, result)
     result = [ :OP_GT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 144)
  def _reduce_43(val, _values, result)
     result = [ :OP_LE, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 146)
  def _reduce_44(val, _values, result)
     result = [ :OP_GE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 151)
  def _reduce_46(val, _values, result)
     result = [ :OP_EQ, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 153)
  def _reduce_47(val, _values, result)
     result = [ :OP_NE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 158)
  def _reduce_49(val, _values, result)
     result = [ :OP_AND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 163)
  def _reduce_51(val, _values, result)
     result = [ :OP_EOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 168)
  def _reduce_53(val, _values, result)
     result = [ :OP_OR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 173)
  def _reduce_55(val, _values, result)
     result = [ :OP_LAND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 178)
  def _reduce_57(val, _values, result)
     result = [ :OP_LOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 183)
  def _reduce_59(val, _values, result)
     result = [ :OP_CEX, val[0], val[2].get_elements, val[4] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 190)
  def _reduce_60(val, _values, result)
                result = Expression.new( val[0] )
            # result.print
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 197)
  def _reduce_61(val, _values, result)
                result = Expression.new( val[0] )
            # result.print

            # res = result.eval_const( nil )
            # if res then
            #   puts "val: #{res}"
            # else
            #   puts "val: nil"
            # end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 219)
  def _reduce_62(val, _values, result)
                val[1].each { |i|    # i: Decl
                i.set_type( val[0] )
            }
            result = val[1]
        
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 235)
  def _reduce_64(val, _values, result)
                val[1].set_qualifier( val[0] )
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 241)
  def _reduce_65(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 243)
  def _reduce_66(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 248)
  def _reduce_68(val, _values, result)
     val[0].set_initializer( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 254)
  def _reduce_69(val, _values, result)
     result = VoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 255)
  def _reduce_70(val, _values, result)
     result = FloatType.new(32) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 256)
  def _reduce_71(val, _values, result)
     result = FloatType.new(64) 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 259)
  def _reduce_74(val, _values, result)
     result = DefinedType.new( val[0].val ) 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 263)
  def _reduce_77(val, _values, result)
     result = BoolType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 269)
  def _reduce_78(val, _values, result)
                Generator.warning( "W5002 float: obsolete type. use float32_t"  )
            result = FloatType.new(32)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 273)
  def _reduce_79(val, _values, result)
                Generator.warning( "W5003 double: obsolete type. use double64_t"  )
            result = FloatType.new(64)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 276)
  def _reduce_80(val, _values, result)
          # namespace_identifier: signature name
            result = DescriptorType.new( val[2] )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 281)
  def _reduce_81(val, _values, result)
     result = IntType.new( -1 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 284)
  def _reduce_82(val, _values, result)
                result = IntType.new( -1 )
            result.set_sign( :SIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 289)
  def _reduce_83(val, _values, result)
                result = IntType.new( -1 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 295)
  def _reduce_84(val, _values, result)
                # Generator.warning( "W5004 char: obsolete type. use char_t"  )
            result = IntType.new( -11 )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 298)
  def _reduce_85(val, _values, result)
     result = IntType.new( -2 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 299)
  def _reduce_86(val, _values, result)
     result = IntType.new( -3 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 300)
  def _reduce_87(val, _values, result)
     result = IntType.new( -4 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 324)
  def _reduce_88(val, _values, result)
     result = IntType.new( 8 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 325)
  def _reduce_89(val, _values, result)
     result = IntType.new( 16 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 326)
  def _reduce_90(val, _values, result)
     result = IntType.new( 32 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 327)
  def _reduce_91(val, _values, result)
     result = IntType.new( 64 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 328)
  def _reduce_92(val, _values, result)
     result = IntType.new( 128 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 331)
  def _reduce_93(val, _values, result)
                result = IntType.new( 8 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 336)
  def _reduce_94(val, _values, result)
                result = IntType.new( 16 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 341)
  def _reduce_95(val, _values, result)
                result = IntType.new( 32 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 346)
  def _reduce_96(val, _values, result)
                result = IntType.new( 64 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 351)
  def _reduce_97(val, _values, result)
                result = IntType.new( 128 )
            result.set_sign( :UNSIGNED, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 356)
  def _reduce_98(val, _values, result)
     result = :SIGNED 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 357)
  def _reduce_99(val, _values, result)
     result = :UNSIGNED 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 363)
  def _reduce_100(val, _values, result)
                val[1].set_sign( val[0] )
            result = val[1]
        
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 371)
  def _reduce_102(val, _values, result)
     StructType.set_define( true )  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 374)
  def _reduce_103(val, _values, result)
                StructType.end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 379)
  def _reduce_104(val, _values, result)
                # tag が無い場合、内部名を与える
            result = StructType.new( :"TAG__#{@@no_struct_tag_num}__" )
            @@no_struct_tag_num += 1
            StructType.set_define( true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 386)
  def _reduce_105(val, _values, result)
                StructType.end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 391)
  def _reduce_106(val, _values, result)
                StructType.set_define( false )
            StructType.end_of_parse
            result = val[1]
        
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 402)
  def _reduce_109(val, _values, result)
     result = StructType.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 408)
  def _reduce_110(val, _values, result)
                val[1].each { |i|    # i: Decl
                i.set_type( val[0] )
                i.set_kind( :MEMBER )
                i.check
                StructType.new_member( i )
            }
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 418)
  def _reduce_111(val, _values, result)
                val[4].each { |i|    # i: Decl
                i.set_type( val[3] )
                i.set_kind( :MEMBER )
                  i.set_specifier_list val[1]
                i.check
                StructType.new_member( i )
            }
            result = val[4]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 429)
  def _reduce_112(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 430)
  def _reduce_113(val, _values, result)
     result <<  val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 433)
  def _reduce_114(val, _values, result)
     result = [:STRING,-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 434)
  def _reduce_115(val, _values, result)
     result = [:STRING,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 435)
  def _reduce_116(val, _values, result)
     result = [:SIZE_IS,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 436)
  def _reduce_117(val, _values, result)
     result = [:COUNT_IS,val[2]] 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 447)
  def _reduce_119(val, _values, result)
                val[1].set_qualifier( val[0] )
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 456)
  def _reduce_120(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 458)
  def _reduce_121(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 471)
  def _reduce_126(val, _values, result)
     result = EnumType.new( -1 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 472)
  def _reduce_127(val, _values, result)
     result = EnumType.new( 8 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 473)
  def _reduce_128(val, _values, result)
     result = EnumType.new( 16 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 474)
  def _reduce_129(val, _values, result)
     result = EnumType.new( 32 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 475)
  def _reduce_130(val, _values, result)
     result = EnumType.new( 64 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 476)
  def _reduce_131(val, _values, result)
     result = EnumType.new( 128 ) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 487)
  def _reduce_136(val, _values, result)
     result = :CONST 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 488)
  def _reduce_137(val, _values, result)
     result = :VOLATILE 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 493)
  def _reduce_138(val, _values, result)
                val[1].set_type( val[0] )
            result = val[1]
        
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 500)
  def _reduce_140(val, _values, result)
     result = Decl.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 502)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 505)
  def _reduce_142(val, _values, result)
                val[0].set_type( ArrayType.new( val[2] ) )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 510)
  def _reduce_143(val, _values, result)
                val[0].set_type( ArrayType.new )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 515)
  def _reduce_144(val, _values, result)
                val[0].set_type( FuncType.new( val[2] ) )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 521)
  def _reduce_145(val, _values, result)
                Generator.warning( "W5010 need 'void' for no parameter"  )
            val[0].set_type( FuncType.new )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 528)
  def _reduce_146(val, _values, result)
     result = PtrType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 531)
  def _reduce_147(val, _values, result)
                result = PtrType.new
            result.set_qualifier( val[1] )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 536)
  def _reduce_148(val, _values, result)
                val[1].set_type(PtrType.new)
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 541)
  def _reduce_149(val, _values, result)
                ptrtype = PtrType.new
            ptrtype.set_qualifier( val[1] )
            val[2].set_type( ptrtype )
            result = val[2]
        
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 555)
  def _reduce_152(val, _values, result)
     result = ParamList.new( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 558)
  def _reduce_153(val, _values, result)
                val[0].add_param( val[2] )
            # result = val[0] 不要
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 568)
  def _reduce_154(val, _values, result)
                val[2].set_kind( :PARAMETER )
            paramdecl = ParamDecl.new( val[2], val[1], val[0] )
            val[2].check
            result = paramdecl
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 577)
  def _reduce_155(val, _values, result)
                Generator.error( "G1001 need specifier for \'$1\'" , val[1].get_name )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 582)
  def _reduce_156(val, _values, result)
                unless val[0].instance_of?( VoidType ) then
                Generator.error( "G1002 need parameter name"  )
            end
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 590)
  def _reduce_157(val, _values, result)
                unless val[1].instance_of?( VoidType ) then
                Generator.error( "G1003 need parameter name"  )
            end
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 597)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 601)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 603)
  def _reduce_160(val, _values, result)
     result = result + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 606)
  def _reduce_161(val, _values, result)
     result = [ [:IN]  ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 607)
  def _reduce_162(val, _values, result)
     result = [ [:OUT] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 608)
  def _reduce_163(val, _values, result)
     result = [ [:INOUT] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 609)
  def _reduce_164(val, _values, result)
     result = [ [:SEND,   val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 610)
  def _reduce_165(val, _values, result)
     result = [ [:RECEIVE,val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 611)
  def _reduce_166(val, _values, result)
     result = [ [:STRING,nil] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 612)
  def _reduce_167(val, _values, result)
     result = [ [:STRING,  val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 613)
  def _reduce_168(val, _values, result)
     result = [ [:SIZE_IS, val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 616)
  def _reduce_169(val, _values, result)
                result = [ [:SIZE_IS,val[2]], [:MAX_IS, val[4]] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 618)
  def _reduce_170(val, _values, result)
     result = [ [:COUNT_IS,val[2]] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 619)
  def _reduce_171(val, _values, result)
     result = [ [:NULLABLE] ] 
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 625)
  def _reduce_173(val, _values, result)
                if val[1] then
                val[1].set_type( val[0] )
                result = val[1]
            else
                # エラー：仮で val[0] を返す
                result = val[0]
            end
        
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 642)
  def _reduce_177(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 645)
  def _reduce_178(val, _values, result)
                Generator.error( "G1004 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 650)
  def _reduce_179(val, _values, result)
                Generator.error( "G1005 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 655)
  def _reduce_180(val, _values, result)
                Generator.error( "G1006 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 660)
  def _reduce_181(val, _values, result)
                Generator.error( "G1007 impossible array type"  )
            result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 665)
  def _reduce_182(val, _values, result)
                Generator.error( "G1008 impossible function type"  )
            result = nil
        
    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 671)
  def _reduce_184(val, _values, result)
                Generator.warning( "W5011 need 'void' for no parameter"  )
            val[0].set_type( FuncType.new )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 677)
  def _reduce_185(val, _values, result)
                val[0].set_type( FuncType.new( val[2] ) )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 684)
  def _reduce_186(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 686)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 688)
  def _reduce_188(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 691)
  def _reduce_189(val, _values, result)
     result = C_EXP.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 696)
  def _reduce_190(val, _values, result)
                result = [ val[0] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 700)
  def _reduce_191(val, _values, result)
                val[0] << val[2]
            result = val[0]
        
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 718)
  def _reduce_196(val, _values, result)
                obj = val[3]
            if obj.kind_of?( Cell ) || obj.kind_of?( Signature ) || obj.kind_of?( Celltype ) || obj.kind_of?( CompositeCelltype )then
                # cell, signature 以外は、指定子を置けない
            else
          Generator.get_statement_specifier   # クリア
          Generator.error( "G1009 unexpected specifier"  )
            end
        
    result
  end
.,.,

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 747)
  def _reduce_211(val, _values, result)
     Generator.add_statement_specifier val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 749)
  def _reduce_212(val, _values, result)
     Generator.add_statement_specifier val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 752)
  def _reduce_213(val, _values, result)
     result = [:ACTIVE] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 754)
  def _reduce_214(val, _values, result)
     result = [ :ALLOCATOR, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 756)
  def _reduce_215(val, _values, result)
     result = [ :CALLBACK ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 758)
  def _reduce_216(val, _values, result)
     result = [ :CONTEXT, val[2].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 760)
  def _reduce_217(val, _values, result)
     result = [ :DEVIATE ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 762)
  def _reduce_218(val, _values, result)
     result = [:GENERATE, val[2].val, val[4].val] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 764)
  def _reduce_219(val, _values, result)
     result = [ :ID, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 765)
  def _reduce_220(val, _values, result)
     result = [:IDX_IS_ID] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 767)
  def _reduce_221(val, _values, result)
     result = [ :PROTOTYPE ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 768)
  def _reduce_222(val, _values, result)
     result = [:PSEUDO_ACTIVE]
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 770)
  def _reduce_223(val, _values, result)
     result = [ :RESTRICT, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 771)
  def _reduce_224(val, _values, result)
     result = [:SINGLETON] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 773)
  def _reduce_225(val, _values, result)
     result = [ :THROUGH, val[2], val[4], val[6] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 776)
  def _reduce_226(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 777)
  def _reduce_227(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 781)
  def _reduce_228(val, _values, result)
      result = [ :NORMAL_ALLOC, val[0], nil, val[2], val[4], val[6] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 783)
  def _reduce_229(val, _values, result)
      result = [ :NORMAL_ALLOC, val[0], val[2], val[5], val[7], val[9] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 792)
  def _reduce_230(val, _values, result)
        result = [val[0]]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 794)
  def _reduce_231(val, _values, result)
        result << val[2]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 798)
  def _reduce_232(val, _values, result)
        result = [ val[0].val, nil, val[3] ]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 800)
  def _reduce_233(val, _values, result)
        result = [ val[0].val, val[2].val, val[5] ]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 804)
  def _reduce_234(val, _values, result)
        result = [val[0]]        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 806)
  def _reduce_235(val, _values, result)
        result << val[2]        
    result
  end
.,.,

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 823)
  def _reduce_240(val, _values, result)
                val[0].each { |decl|
                decl.set_kind( :CONSTANT )
                Namespace.new_const_decl( decl )
                decl.check
            }
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 833)
  def _reduce_241(val, _values, result)
                @@import_C = true
            Import_C.new( val[2] )
            @@import_C = false
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 839)
  def _reduce_242(val, _values, result)
                @@import_C = true
            Import_C.new( val[2], val[4] )
            @@import_C = false
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 846)
  def _reduce_243(val, _values, result)
     Import.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 848)
  def _reduce_244(val, _values, result)
     Import.new( val[2], true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 853)
  def _reduce_245(val, _values, result)
     Generate.new( val[2].val, val[4], val[6] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 858)
  def _reduce_246(val, _values, result)
                val[2].each{ |i|       # i:Decl
                i.set_kind( :TYPEDEF )
            }
            Typedef.new_decl_list( val[1], val[2] )
            val[2].each{ |i|       # i:Decl
                i.check
            }
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 868)
  def _reduce_247(val, _values, result)
                val[5].each{ |i|       # i:Decl
                i.set_kind( :TYPEDEF )
            }
            Typedef.new_decl_list( val[4], val[5] )
            val[5].each{ |i|       # i:Decl
                i.check
            }
        
    result
  end
.,.,

# reduce 248 omitted

# reduce 249 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 885)
  def _reduce_250(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 887)
  def _reduce_251(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 891)
  def _reduce_252(val, _values, result)
    val[1].end_of_parse
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 895)
  def _reduce_253(val, _values, result)
    result = Namespace.new(val[0].val)
    result
  end
.,.,

# reduce 254 omitted

# reduce 255 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 903)
  def _reduce_256(val, _values, result)
     result = NamespacePath.new( val[0].val, false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 904)
  def _reduce_257(val, _values, result)
     result = NamespacePath.new( val[1].val, true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 906)
  def _reduce_258(val, _values, result)
     result = val[0].append!( val[2].val ) 
    result
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 914)
  def _reduce_260(val, _values, result)
     result = val[1].end_of_parse( val[3] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 918)
  def _reduce_261(val, _values, result)
    result = Signature.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 924)
  def _reduce_262(val, _values, result)
     result = NamedList.new( nil, "function" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 926)
  def _reduce_263(val, _values, result)
     result = val[0].add_item( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 931)
  def _reduce_264(val, _values, result)
                # val[1]: Decl
            if val[1].is_function? then
                result = FuncHead.new( val[1], val[0], false )
                val[1].set_kind :FUNCHEAD
                val[1].check
            else
                # mikan 関数の配列も以下のメッセージになる
                Generator.error( "G1010 Not function"  )
                result = nil
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 944)
  def _reduce_265(val, _values, result)
                if val[4].is_function? then
                result = FuncHead.new( val[4], val[3], true )
            else
                Generator.error( "G1011 Not function"  )
                result = nil
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 956)
  def _reduce_266(val, _values, result)
                val[1].end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 962)
  def _reduce_267(val, _values, result)
     result = Celltype.new(val[0].val) 
    result
  end
.,.,

# reduce 268 omitted

# reduce 269 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 971)
  def _reduce_270(val, _values, result)
                if val[0].kind_of? Port then
                Celltype.new_port( val[0] )
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 977)
  def _reduce_271(val, _values, result)
                if val[3].kind_of? Port then
                val[3].set_specifier val[1]  # 設定順序あり
                Celltype.new_port( val[3] )
            else
                # Port 以外では指定子はエラー
                Generator.error( "G1012 $1 : cannot put specifier here" , val[1] )
            end
        
    result
  end
.,.,

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 996)
  def _reduce_277(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 998)
  def _reduce_278(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1001)
  def _reduce_279(val, _values, result)
     result = [ :INLINE ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1002)
  def _reduce_280(val, _values, result)
     result = [ :ALLOCATOR, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1003)
  def _reduce_281(val, _values, result)
     result = [ :OPTIONAL ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1004)
  def _reduce_282(val, _values, result)
     result = [ :REF_DESC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1005)
  def _reduce_283(val, _values, result)
     result = [ :DYNAMIC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1006)
  def _reduce_284(val, _values, result)
     result = [ :OMIT ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1009)
  def _reduce_285(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1010)
  def _reduce_286(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1011)
  def _reduce_287(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1012)
  def _reduce_288(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1016)
  def _reduce_289(val, _values, result)
      result = [ :INTERNAL_ALLOC, val[0].val, val[2].val, val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1018)
  def _reduce_290(val, _values, result)
      result = [ :RELAY_ALLOC, val[0].val, val[2].val, val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1024)
  def _reduce_291(val, _values, result)
     result = Port.new( val[2].val, val[1], val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1026)
  def _reduce_292(val, _values, result)
     result = Port.new( val[2].val, val[1], val[0], "[]" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1028)
  def _reduce_293(val, _values, result)
     result = Port.new(val[2].val, val[1], val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1030)
  def _reduce_294(val, _values, result)
     result = Port.new( val[2].val, val[1], val[0], nil, val[4], val[ 6 ].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1033)
  def _reduce_295(val, _values, result)
     result = :CALL 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1034)
  def _reduce_296(val, _values, result)
     result = :ENTRY 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1038)
  def _reduce_297(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 298 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1047)
  def _reduce_299(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1051)
  def _reduce_300(val, _values, result)
     Celltype.new_attribute( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1053)
  def _reduce_301(val, _values, result)
     Celltype.new_attribute( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1059)
  def _reduce_302(val, _values, result)
                val[0].each{ |i|       # i:Decl
                i.set_kind( :ATTRIBUTE )
                i.check
            }
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1067)
  def _reduce_303(val, _values, result)
                val[3].each{ |i|       # i:Decl
                i.set_kind( :ATTRIBUTE )   # 設定順序あり
                i.set_specifier_list( [val[1]] )
                i.check
            }
            result = val[3]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1076)
  def _reduce_304(val, _values, result)
     result = [:OMIT] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1077)
  def _reduce_305(val, _values, result)
     result = [:SIZE_IS,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1078)
  def _reduce_306(val, _values, result)
      result = [:CHOICE,val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1081)
  def _reduce_307(val, _values, result)
      result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1082)
  def _reduce_308(val, _values, result)
      result = [ val[0] ] 
    result
  end
.,.,

# reduce 309 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1090)
  def _reduce_310(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1094)
  def _reduce_311(val, _values, result)
     Celltype.new_var( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1096)
  def _reduce_312(val, _values, result)
     Celltype.new_var( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1101)
  def _reduce_313(val, _values, result)
                val[0].each{ |i|       # i:Decl
                i.set_kind( :VAR )
                i.check
            }
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1108)
  def _reduce_314(val, _values, result)
                val[3].each{ |i|       # i:Decl
                i.set_kind( :VAR )   # 設定順序あり
                i.set_specifier_list( [val[1]] )
                i.check
            }
            result = val[3]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1117)
  def _reduce_315(val, _values, result)
     result = [:SIZE_IS,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1123)
  def _reduce_316(val, _values, result)
                Celltype.new_require( val[1], val[3] )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1127)
  def _reduce_317(val, _values, result)
                Celltype.new_require( val[3], val[5], val[1].val )
        
    result
  end
.,.,

# reduce 318 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1135)
  def _reduce_319(val, _values, result)
     Factory.set_f_celltype( false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1136)
  def _reduce_320(val, _values, result)
     Factory.set_f_celltype( true ) 
    result
  end
.,.,

# reduce 321 omitted

# reduce 322 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1144)
  def _reduce_323(val, _values, result)
     Factory.new( val[0].val, val[2], val[4], nil    ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1146)
  def _reduce_324(val, _values, result)
     Factory.new( val[0].val, val[2], val[4], val[6] ) 
    result
  end
.,.,

# reduce 325 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1153)
  def _reduce_326(val, _values, result)
     result = [ [ :IDENTIFIER, val[0].val ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1155)
  def _reduce_327(val, _values, result)
     result << [ :IDENTIFIER, val[2].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1157)
  def _reduce_328(val, _values, result)
     result = [ [ :STRING_LITERAL, val[0].val ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1159)
  def _reduce_329(val, _values, result)
     result << [ :STRING_LITERAL, val[2].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1164)
  def _reduce_330(val, _values, result)
     Cell.new_def 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1166)
  def _reduce_331(val, _values, result)
     result = Cell.end_of_parse true 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1168)
  def _reduce_332(val, _values, result)
     result = Cell.end_of_parse false 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1172)
  def _reduce_333(val, _values, result)
     result = Cell.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1176)
  def _reduce_334(val, _values, result)
     result = Cell.set_name(val[0].val) 
    result
  end
.,.,

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1185)
  def _reduce_338(val, _values, result)
     val[3].set_specifier_list( val[1] )  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1187)
  def _reduce_339(val, _values, result)
     val[0].set_specifier_list( [] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1191)
  def _reduce_340(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1193)
  def _reduce_341(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1197)
  def _reduce_342(val, _values, result)
     result = [ :THROUGH, val[2], val[4] ] 
    result
  end
.,.,

# reduce 343 omitted

# reduce 344 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1214)
  def _reduce_345(val, _values, result)
                result = Join.new( val[0].val,  -1, val[4] )
            Cell.new_join( result, true )
         
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1219)
  def _reduce_346(val, _values, result)
                result = Join.new( val[0].val, val[2], val[5] )
            Cell.new_join( result, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1224)
  def _reduce_347(val, _values, result)
                result = Join.new( val[0].val, nil, val[2] )
            Cell.new_join( result, true )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1229)
  def _reduce_348(val, _values, result)
                result = Join.new( val[0].val, nil, [ :COMPOSITE, val[4] ] )
            Cell.new_join( result, true )
        
    result
  end
.,.,

# reduce 349 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1240)
  def _reduce_350(val, _values, result)
                rj = ReverseJoin.new( val[0].val, nil, val[2], val[4].val )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1246)
  def _reduce_351(val, _values, result)
                rj = ReverseJoin.new( val[0].val, nil, val[2], val[4].val, val[6] )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1252)
  def _reduce_352(val, _values, result)
                rj = ReverseJoin.new( val[0].val, val[2], val[5], val[7].val )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1258)
  def _reduce_353(val, _values, result)
                rj = ReverseJoin.new( val[0].val, val[2], val[5], val[7].val, val[9] )
            Cell.new_reverse_join( rj )
        
    result
  end
.,.,

# reduce 354 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1270)
  def _reduce_355(val, _values, result)
                CompositeCelltype.end_of_parse
            result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1276)
  def _reduce_356(val, _values, result)
     result = CompositeCelltype.new(val[0].val) 
    result
  end
.,.,

# reduce 357 omitted

# reduce 358 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1285)
  def _reduce_359(val, _values, result)
                if val[0].kind_of?( Port ) then
                CompositeCelltype.new_port( val[0] )   # 遅延して登録
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1291)
  def _reduce_360(val, _values, result)
                if val[3].kind_of?( Port ) then
                # port 以外 val[3] に有効な値が入っていないので、以下のメソッドを適用できない
                # 現状 port, cell 以外は指定子を受け付けない
                # （しかし将来他の文も指定子を受け付ける可能性があるので、この位置に記述する）
                val[3].set_specifier( Generator.get_statement_specifier )
                CompositeCelltype.new_port( val[3] )   # 遅延して登録 (set_specifier 後)
            elsif val[3].kind_of?( Cell ) then
                # Cell.end_of_parse にて設定
            else
          Generator.get_statement_specifier   # クリア
          Generator.error( "G1013 unexpected specifier"  )
            end
        
    result
  end
.,.,

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1315)
  def _reduce_365(val, _values, result)
                Generator.add_statement_specifier val[0]
            result = [ val[0] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1320)
  def _reduce_366(val, _values, result)
                Generator.add_statement_specifier val[2]
            result = val[0] << val[2]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1325)
  def _reduce_367(val, _values, result)
     result = [ :ALLOCATOR, val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1326)
  def _reduce_368(val, _values, result)
     result = [ :OMIT ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1327)
  def _reduce_369(val, _values, result)
     result = [ :OPTIONAL ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1328)
  def _reduce_370(val, _values, result)
     result = [ :REF_DESC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1329)
  def _reduce_371(val, _values, result)
     result = [ :DYNAMIC ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1334)
  def _reduce_372(val, _values, result)
                # CompositeCelltype.new_port( val[0] )
            result = val[0]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1341)
  def _reduce_373(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1345)
  def _reduce_374(val, _values, result)
     CompositeCelltype.new_attribute( val[0] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1347)
  def _reduce_375(val, _values, result)
     CompositeCelltype.new_attribute( val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1352)
  def _reduce_376(val, _values, result)
     Cell.new_def 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1354)
  def _reduce_377(val, _values, result)
     result = Cell.end_of_parse true 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1356)
  def _reduce_378(val, _values, result)
     result = Cell.end_of_parse false 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1360)
  def _reduce_379(val, _values, result)
     Cell.new(val[0],true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1364)
  def _reduce_380(val, _values, result)
     Cell.set_name(val[0].val) 
    result
  end
.,.,

# reduce 381 omitted

# reduce 382 omitted

# reduce 383 omitted

# reduce 384 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1374)
  def _reduce_385(val, _values, result)
        Cell.external_join( val[0].val, val[4].val, true )    
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1376)
  def _reduce_386(val, _values, result)
        Cell.external_join( val[0].val, val[2].val, false )    
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1383)
  def _reduce_387(val, _values, result)
                CompositeCelltype.new_join( val[0].val,
                        val[2].val, val[4].val, :ENTRY )
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1388)
  def _reduce_388(val, _values, result)
                CompositeCelltype.new_join( val[2].val,
                        val[4].val, val[6].val, :ENTRY )
        
    result
  end
.,.,

# reduce 389 omitted

# reduce 390 omitted

# reduce 391 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1404)
  def _reduce_392(val, _values, result)
     Region.end_of_parse 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1406)
  def _reduce_393(val, _values, result)
     Region.end_of_parse 
    result
  end
.,.,

# reduce 394 omitted

# reduce 395 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1414)
  def _reduce_396(val, _values, result)
     Region.new_in_through( val[2].val, val[4].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1416)
  def _reduce_397(val, _values, result)
     Region.new_in_through 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1418)
  def _reduce_398(val, _values, result)
     Region.new_out_through( val[2].val, val[4].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1420)
  def _reduce_399(val, _values, result)
     Region.new_out_through() 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1422)
  def _reduce_400(val, _values, result)
     Region.new_to_through( val[2], val[4].val, val[6].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1424)
  def _reduce_401(val, _values, result)
     Region.new_to_through( val[2], nil, nil ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1426)
  def _reduce_402(val, _values, result)
     Region.new_from_through( val[2], val[4].val, val[6].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1428)
  def _reduce_403(val, _values, result)
     Region.new_from_through( val[2], nil, nil ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1430)
  def _reduce_404(val, _values, result)
     Region.set_type( :NODE ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1432)
  def _reduce_405(val, _values, result)
     Region.set_type( :LINKUNIT ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1434)
  def _reduce_406(val, _values, result)
     Region.set_domain( val[2].val, val[4] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1436)
  def _reduce_407(val, _values, result)
     Region.set_class( val[2].val, val[4] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1440)
  def _reduce_408(val, _values, result)
     result = Region.new( val[0].val ) 
    result
  end
.,.,

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1461)
  def _reduce_417(val, _values, result)
                obj = val[3]
            if obj.kind_of?( Cell ) then
            else
          Generator.get_statement_specifier   # クリア
          Generator.error( "G9999 unexpected specifier"  )
            end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1482)
  def _reduce_418(val, _values, result)
     result = [ val[0].val ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1487)
  def _reduce_419(val, _values, result)
     set_in_specifier 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1489)
  def _reduce_420(val, _values, result)
     unset_in_specifier 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1494)
  def _reduce_421(val, _values, result)
     TOOL_INFO.new( val[2].to_sym, val[4] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1495)
  def _reduce_422(val, _values, result)
      result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1496)
  def _reduce_423(val, _values, result)
     result = { val[0].to_sym => val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1498)
  def _reduce_424(val, _values, result)
     val[0][ val[2].to_sym ] = val[4] 
    result
  end
.,.,

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

module_eval(<<'.,.,', 'bnf.y.rb', 1500)
  def _reduce_429(val, _values, result)
     result=val[0].val 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1500)
  def _reduce_430(val, _values, result)
     result=val[0].val 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1501)
  def _reduce_431(val, _values, result)
     result = val[1]  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1502)
  def _reduce_432(val, _values, result)
     result = []  
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1503)
  def _reduce_433(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1504)
  def _reduce_434(val, _values, result)
     val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1505)
  def _reduce_435(val, _values, result)
     result = val[0].val.gsub!( /\"(.*)\"/, "\\1" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1506)
  def _reduce_436(val, _values, result)
     result = val[0].val.to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1507)
  def _reduce_437(val, _values, result)
     result = val[0].val.to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1508)
  def _reduce_438(val, _values, result)
     result = - val[0].val.to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1509)
  def _reduce_439(val, _values, result)
     result = - val[0].val.to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1510)
  def _reduce_440(val, _values, result)
     result = val[0].val.to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'bnf.y.rb', 1511)
  def _reduce_441(val, _values, result)
     result = val[0].val.to_f 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Generator



# ファイル => INCLUDE("header")の配列
Include = Hash.new {|hash, key| hash[key] = []}


class Token

  attr_accessor :val, :file, :lineno, :col

  def initialize(val, file, lineno, col)
    @val = val
    @file = file
    @lineno = lineno
    @col = col

  end

  def to_s
    @val.to_s
  end

  def to_sym
    @val.to_sym
  end

  def get_name
    @val
  end

  def locale
    [@file, @lineno, @col]
  end

  def eql?(other)
    if other.is_a? Symbol
      @val == other
    elsif other.is_a? Token
      @val == other.val
    elsif other.is_a? String
      @val.to_s == other
    else
      raise ArgumentError
    end
  end

  alias == eql?

  def show_tree( indent )
    indent.times { print "  " }
    print "#{@val}\n"
  end

end

#= TECSIO
#  Ruby2.0(1.9) 対応に伴い導入したクラス
#  SJIS 以外では、ASCII-8BIT として入力する
class TECSIO
  def self.foreach(file) # ブロック引数 { |line| }
    pr = Proc.new   # このメソッドのブロック引数を pr に代入
    if $b_no_kcode then
      msg = "E".encode $Ruby19_File_Encode
      if( $Ruby19_File_Encode == "Shift_JIS" )

    # Shift JIS は、いったん Windows-31J として読み込ませ、Shift_JIS に変換させる．
    # コメント等に含まれる SJIS に不適切な文字コードは '?' または REPLACEMENT CHARACTER に変換される．
    # EUC や UTF-8 で記述された CDL が混在していても、Ruby 例外が発生することなく処理を進めることができる．
    # 文字コード指定が SJIS であって、文字列リテラルの中に、文字コードがSJIS 以外の非 ASCII が含まれている場合、
    # Ruby 1.8 の tecsgen では文字コード指定に影響なく処理されたものが、Ruby 1.9 以降では '?' に置き換わる可能性がある．

    mode = "r:Windows-31J"
      else
    mode = "r:#{$Ruby19_File_Encode}"
      end
      # mode = "r"
    else
      msg = "E"
      mode = "r"
    end

    f = File.open( file, mode )
    begin
      f.each{ |line|
    # dbgPrint line
    line = str_code_convert( msg, line )
    pr.call( line )
      }
    ensure
      f.close
    end
  end

  #=== 文字コードが相違する場合一致させる
  # msg と str の文字コードが相違する場合、str を msg の文字コードに変換する
  # 変換不可の文字コードは '?' (utf-8 の場合 U+FFFD (REPLACEMENT CHARACTER )) に変換
  #
  # このメソッドは、エラーメッセージ出力でも使用されていることに注意．
  #
  #msg_enc::Encode | String
  def self.str_code_convert( msg, str )
    if $b_no_kcode == false then
      return str              # Ruby V1.8 まで
    end
    if msg.encoding != str.encoding then
      option = { :invalid => :replace, :undef => :replace }   # 例外を発生させず、'?' に変換する(utf-8 は 0xfffd)
      # return str.encode( msg.encoding, option )
      str = str.encode( "utf-8", option )
      return str.encode( msg.encoding, option )
    else
      return str
    end
  end
end
